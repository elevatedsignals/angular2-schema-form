{"version":3,"sources":["ng://ngx-schema-form/lib/model/actionregistry.ts","node_modules/tslib/tslib.es6.js","ng://ngx-schema-form/lib/model/formproperty.ts","ng://ngx-schema-form/lib/model/atomicproperty.ts","ng://ngx-schema-form/lib/model/numberproperty.ts","ng://ngx-schema-form/lib/model/stringproperty.ts","ng://ngx-schema-form/lib/model/booleanproperty.ts","ng://ngx-schema-form/lib/model/objectproperty.ts","ng://ngx-schema-form/lib/model/arrayproperty.ts","ng://ngx-schema-form/lib/model/formpropertyfactory.ts","ng://ngx-schema-form/lib/model/schemapreprocessor.ts","ng://ngx-schema-form/lib/model/utils.ts","ng://ngx-schema-form/lib/model/validatorregistry.ts","ng://ngx-schema-form/lib/model/bindingregistry.ts","ng://ngx-schema-form/lib/schemavalidatorfactory.ts","ng://ngx-schema-form/lib/widgetregistry.ts","ng://ngx-schema-form/lib/widgetfactory.ts","ng://ngx-schema-form/lib/terminator.service.ts","ng://ngx-schema-form/lib/property-binding-registry.ts","ng://ngx-schema-form/lib/form.component.ts","ng://ngx-schema-form/lib/formelement.component.ts","ng://ngx-schema-form/lib/formelement.action.component.ts","ng://ngx-schema-form/lib/widgetchooser.component.ts","ng://ngx-schema-form/lib/widget.ts","ng://ngx-schema-form/lib/defaultwidgets/array/array.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/button/button.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/object/object.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/checkbox/checkbox.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/file/file.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/integer/integer.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/textarea/textarea.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/radio/radio.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/range/range.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/select/select.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/string/string.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/defaultwidgetregistry.ts","ng://ngx-schema-form/lib/default.widget.ts","ng://ngx-schema-form/lib/schema-form.module.ts","ng://ngx-schema-form/lib/template-schema/template-schema.service.ts","ng://ngx-schema-form/lib/template-schema/template-schema-element.ts","ng://ngx-schema-form/lib/template-schema/button/button.component.ts","ng://ngx-schema-form/lib/template-schema/field/field.ts","ng://ngx-schema-form/lib/template-schema/field/field-parent.ts","ng://ngx-schema-form/lib/template-schema/field/item/item.component.ts","ng://ngx-schema-form/lib/template-schema/field/field.component.ts","ng://ngx-schema-form/lib/template-schema/template-schema.directive.ts","ng://ngx-schema-form/lib/template-schema/template-schema.module.ts"],"names":["ActionRegistry","this","actions","prototype","clear","register","actionId","action","get","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","__read","n","r","e","ar","push","error","__spread","arguments","concat","FormProperty","schemaValidatorFactory","validatorRegistry","schema","parent","path","_value","_errors","_valueChanges","BehaviorSubject","_errorsChanges","_visible","_visibilityChanges","schemaValidator","createValidatorFn","_parent","_root","root","PropertyGroup","_path","defineProperty","type","updateValueAndValidity","onlySelf","emitEvent","_updateValue","valueChanges","_runValidation","errors","customValidator","customErrors","findRoot","mergeErrors","setErrors","newErrors","isArray","apply","extendErrors","searchProperty","prop","base","result","getProperty","substr","property","setVisible","visible","__bindVisibility","_this","visibleIfProperty","visibleIf","visibleIfOf","oneOf","allOf","keys","this_1","undefined","propertiesBinding","dependencyPath","properties","findProperties","properties_1","tslib_1.__values","properties_1_1","valueCheck","pipe","map","indexOf","_c","_d","item","_e","_f","depPath","propVal","visibilityCheck","and","combineLatest","v1","v2","console","warn","registerMissingVisibilityBinding","values","_i","distinctUntilChanged","subscribe","visibleIfOf_1","visibleIfOf_1_1","_bindVisibility","this_2","properties_2","properties_2_1","formProperty","_propertyBindingRegistry","getPropertyBindingsVisibility","add","target","propertyPath","props","paths","findPropertyPaths","paths_1","paths_1_1","parentPath","ix","prePath","substring","subPath","pathFound","arrProp","curreItemPath","endsWith","curreItemPrePath","childrenPathFound","_super","_properties","_propertyProxyHandler","set","receiver","_a","propertyValue","_canonicalPath","indexOfChild","pos","lastIndexOf","toString","getCanonicalPath","propertyGroup","propertyGroupChildren","propertyGroupChildren_1","propertyGroupChildren_1_1","child","children","assertCanonicalPath","rebindAll","findPropertiesToRebind","propertyBindings","rebind","findByDependencyPath","startsWith","uniqueValues","rebind_1","rebind_1_1","rebindAll_1","rebindAll_1_1","_property","rebindPaths","rebindPaths_1","rebindPaths_1_1","rebindPropPath","rebindVisibility","deleteProperty","tslib_1.__extends","Proxy","subPathIdx","propertyId","forEachChild","fn","forEachChildRecursive","_bindVisibilityRecursive","isRoot","AtomicProperty","setValue","reset","resetValue","default","fallbackValue","_hasValue","NumberProperty","parseFloat","parseInt","StringProperty","BooleanProperty","ObjectProperty","formPropertyFactory","propertiesId","createProperties","resetProperties","propertySchema","createProperty","reduceValue","forEach","slice","ArrayProperty","addItem","newProperty","addProperty","items","removeItem","filter","_","idx","FormPropertyFactory","propertyBindingRegistry","$ref","refSchema","getSchema","TypeError","initializeRoot","rootProperty","formatMessage","message","schemaError","mesg","Error","schemaWarning","SchemaPreprocessor","preprocess","jsonSchema","normalizeExtensions","checkProperties","checkAndCreateFieldsets","checkItems","normalizeWidget","recursiveCheck","isBlank","fieldsets","order","replaceOrderByFieldsets","createFieldsets","checkFieldsUsage","fieldsId","usedFields","fieldset","fields","_g","fieldId","id","fieldsId_1","fieldsId_1_1","isRequired","required","remainingfieldsId","title","description","name","fieldSchema","widget","definitions","removeRecursiveRefProperties","definitionPath","extensions","regex","k","find","match","v","copy","JSON","parse","stringify","ValidatorRegistry","validators","validator","BindingRegistry","bindings","binding","SchemaValidatorFactory","ZSchemaValidatorFactory","createSchemaValidator","zschema","ZSchema","breakOnFirstError","validate","err","getLastErrors","denormalizeRequiredPropertyPaths","ref","compileSchema","getDefinition","getLastError","code","params","foundSchema","split","ptr","WidgetRegistry","widgets","setDefaultWidget","defaultWidget","getDefaultWidget","hasWidget","getWidgetType","WidgetFactory","registry","resolver","createWidget","container","componentClass","componentFactory","resolveComponentFactory","createComponent","Injectable","ComponentFactoryResolver","TerminatorService","onDestroy","Subject","destroy","PropertyBindingRegistry","getPropertyBindings","PropertyBindings","PropertyBindingTypes","visibility","sourcesIndex","SimplePropertyIndexer","dependenciesIndex","sourcePropertyPath","store","results","_b","res","found","getBySourcePropertyPath","createPathIndex","index","findOnlyWithValue","_createPathIndex","replace","RegExp","_storeIndex","pathIndex","indexPos","pathIndex_1","pathIndex_1_1","key","MARKER","_findInIndex","ixRes","__findIndex","indexerResults","segment","wild","_keys","keys_1","keys_1_1","restPath","restIndex","restParent","restPaths","useFactory","FormComponent","actionRegistry","bindingRegistry","cdr","terminator","onChange","EventEmitter","modelChange","isValid","onErrorChange","onErrorsChange","writeValue","obj","registerOnChange","onChangeCallback","onValueChanges","bind","registerOnTouched","ngOnChanges","changes","setValidators","setActions","setBindings","firstChange","model","errorsChanges","emit","detectChanges","validatorId","bindingPath","setModel","assign","observers","Component","args","selector","template","providers","provide","deps","NG_VALUE_ACCESSOR","useExisting","multi","ChangeDetectorRef","Input","Output","FormElementComponent","renderer","elementRef","control","FormControl","buttons","unlisten","ngOnInit","parseButtons","setupBindings","eventId","createBinding","listener","listen","nativeElement","event","Function","button","createButtonCallback","parameters","preventDefault","onWidgetInstanciated","counter","ngOnDestroy","Renderer2","ElementRef","FormElementComponentAction","widgetFactory","subs","instance","unsubscribe","ViewChild","read","ViewContainerRef","WidgetChooserComponent","widgetInstanciated","widgetInfo","widgetInstance","Widget","ControlWidget","ngAfterViewInit","newValue","messages","errorMessages","ArrayLayoutWidget","ObjectLayoutWidget","ArrayWidget","trackByIndex","ButtonWidget","ObjectWidget","CheckboxWidget","checked","onCheck","el","FileWidget","reader","FileReader","filedata","onloadend","data","window","btoa","onFileChange","$event","file","files","filename","size","encoding","readAsBinaryString","IntegerWidget","TextAreaWidget","RadioWidget","RangeWidget","SelectWidget","StringWidget","getInputType","DefaultWidgetRegistry","DefaultWidget","moduleProviders","useClass","SchemaFormModule","forRoot","ngModule","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","declarations","entryComponents","exports","TemplateSchemaService","changed","TemplateSchemaElement","getTextContent","node","from","childNodes","nodeType","TEXT_NODE","pop","nodeValue","trim","ButtonComponent","label","click","setLabelFromContent","textContent","ngAfterContentInit","forwardRef","FieldParent","getButtons","childButtons","randomString","Math","random","_button","getFieldsValidators","reduce","field","getValidators","getFieldsSchema","FieldType","ItemComponent","FieldComponent","templateSchemaService","childFields","getOneOf","placeholder","format","readOnly","isFirstChange","childItems","enum","setTitleFromContent","merge","ContentChildren","TemplateSchemaDirective","formComponent","terminatorService","setFormDocumentSchema","previousSchema","requred","SimpleChange","Boolean","toArray","Directive","TemplateSchemaModule"],"mappings":"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","sourcesContent":["import { Action } from './action';\n\nexport class ActionRegistry {\n  actions: {[key: string]: Action} = {};\n\n  clear() {\n    this.actions = {};\n  }\n\n  register(actionId: string, action: Action) {\n    this.actions[actionId] = action;\n  }\n\n  get(actionId: string) {\n    return this.actions[actionId];\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {BehaviorSubject, combineLatest} from 'rxjs';\nimport {distinctUntilChanged, map} from 'rxjs/operators';\n\nimport {SchemaValidatorFactory} from '../schemavalidatorfactory';\nimport {ValidatorRegistry} from './validatorregistry';\nimport {PropertyBindingRegistry} from '../property-binding-registry';\n\nexport abstract class FormProperty {\n  public schemaValidator: Function;\n\n  _value: any = null;\n  _errors: any = null;\n  private _valueChanges = new BehaviorSubject<any>(null);\n  private _errorsChanges = new BehaviorSubject<any>(null);\n  private _visible = true;\n  private _visibilityChanges = new BehaviorSubject<boolean>(true);\n  private _root: PropertyGroup;\n  private _parent: PropertyGroup;\n  private _path: string;\n  _propertyBindingRegistry: PropertyBindingRegistry;\n  _canonicalPath: string;\n\n  constructor(schemaValidatorFactory: SchemaValidatorFactory,\n              private validatorRegistry: ValidatorRegistry,\n              public schema: any,\n              parent: PropertyGroup,\n              path: string) {\n    this.schemaValidator = schemaValidatorFactory.createValidatorFn(this.schema);\n\n    this._parent = parent;\n    if (parent) {\n      this._root = parent.root;\n    } else if (this instanceof PropertyGroup) {\n      this._root = <PropertyGroup><any>this;\n    }\n    this._path = path;\n  }\n\n  public get valueChanges() {\n    return this._valueChanges;\n  }\n\n  public get errorsChanges() {\n    return this._errorsChanges;\n  }\n\n  public get type(): string {\n    return this.schema.type;\n  }\n\n  public get parent(): PropertyGroup {\n    return this._parent;\n  }\n\n  public get root(): PropertyGroup {\n    return this._root || <PropertyGroup><any>this;\n  }\n\n  public get path(): string {\n    return this._path;\n  }\n\n  public get value() {\n    return this._value;\n  }\n\n  public get visible() {\n    return this._visible;\n  }\n\n  public get valid() {\n    return this._errors === null;\n  }\n\n  public abstract setValue(value: any, onlySelf: boolean);\n\n  public abstract reset(value: any, onlySelf: boolean);\n\n  public updateValueAndValidity(onlySelf = false, emitEvent = true) {\n    this._updateValue();\n\n    if (emitEvent) {\n      this.valueChanges.next(this.value);\n    }\n\n    this._runValidation();\n\n    if (this.parent && !onlySelf) {\n      this.parent.updateValueAndValidity(onlySelf, emitEvent);\n    }\n\n  }\n\n  /**\n   * @internal\n   */\n  public abstract _hasValue(): boolean;\n\n  /**\n   *  @internal\n   */\n  public abstract _updateValue();\n\n  /**\n   * @internal\n   */\n  public _runValidation(): any {\n    let errors = this.schemaValidator(this._value) || [];\n    let customValidator = this.validatorRegistry.get(this.path);\n    if (customValidator) {\n      let customErrors = customValidator(this.value, this, this.findRoot());\n      errors = this.mergeErrors(errors, customErrors);\n    }\n    if (errors.length === 0) {\n      errors = null;\n    }\n\n    this._errors = errors;\n    this.setErrors(this._errors);\n  }\n\n  private mergeErrors(errors, newErrors) {\n    if (newErrors) {\n      if (Array.isArray(newErrors)) {\n        errors = errors.concat(...newErrors);\n      } else {\n        errors.push(newErrors);\n      }\n    }\n    return errors;\n  }\n\n  private setErrors(errors) {\n    this._errors = errors;\n    this._errorsChanges.next(errors);\n  }\n\n  public extendErrors(errors) {\n    errors = this.mergeErrors(this._errors || [], errors);\n    this.setErrors(errors);\n  }\n\n  searchProperty(path: string): FormProperty {\n    let prop: FormProperty = this;\n    let base: PropertyGroup = null;\n\n    let result = null;\n    if (path[0] === '/') {\n      base = this.findRoot();\n      result = base.getProperty(path.substr(1));\n    } else {\n      while (result === null && prop.parent !== null) {\n        prop = base = prop.parent;\n        result = base.getProperty(path);\n      }\n    }\n    return result;\n  }\n\n  public findRoot(): PropertyGroup {\n    let property: FormProperty = this;\n    while (property.parent !== null) {\n      property = property.parent;\n    }\n    return <PropertyGroup>property;\n  }\n\n  private setVisible(visible: boolean) {\n    this._visible = visible;\n    this._visibilityChanges.next(visible);\n    this.updateValueAndValidity();\n    if (this.parent) {\n      this.parent.updateValueAndValidity(false, true);\n    }\n  }\n\n  private __bindVisibility(): boolean {\n    /**\n     * <pre>\n     *     \"oneOf\":[{\n     *         \"path\":[\"value\",\"value\"]\n     *     },{\n     *         \"path\":[\"value\",\"value\"]\n     *     }]\n     *     </pre>\n     * <pre>\n     *     \"allOf\":[{\n     *         \"path\":[\"value\",\"value\"]\n     *     },{\n     *         \"path\":[\"value\",\"value\"]\n     *     }]\n     *     </pre>\n     */\n    const visibleIfProperty = this.schema.visibleIf;\n    const visibleIfOf = (visibleIfProperty || {}).oneOf || (visibleIfProperty || {}).allOf;\n    if (visibleIfOf) {\n      for (const visibleIf of visibleIfOf) {\n        if (typeof visibleIf === 'object' && Object.keys(visibleIf).length === 0) {\n          this.setVisible(false);\n        } else if (visibleIf !== undefined) {\n          const propertiesBinding = [];\n          for (const dependencyPath in visibleIf) {\n            if (visibleIf.hasOwnProperty(dependencyPath)) {\n              const properties = this.findProperties(this, dependencyPath);\n              if ((properties || []).length) {\n                for (const property of properties) {\n                  if (property) {\n                    let valueCheck;\n                    if (this.schema.visibleIf.oneOf) {\n                      valueCheck = property.valueChanges.pipe(map(\n                        value => {\n                          if (visibleIf[dependencyPath].indexOf('$ANY$') !== -1) {\n                            return value.length > 0;\n                          } else {\n                            return visibleIf[dependencyPath].indexOf(value) !== -1;\n                          }\n                        }\n                      ));\n                    } else if (this.schema.visibleIf.allOf) {\n                      const _chk = (value) => {\n                        for (const item of this.schema.visibleIf.allOf) {\n                          for (const depPath of Object.keys(item)) {\n                            const prop = this.searchProperty(depPath);\n                            const propVal = prop._value;\n                            let valid = false;\n                            if (item[depPath].indexOf('$ANY$') !== -1) {\n                              valid = propVal.length > 0;\n                            } else {\n                              valid = item[depPath].indexOf(propVal) !== -1;\n                            }\n                            if (!valid) {\n                              return false;\n                            }\n                          }\n                        }\n                        return true;\n                      };\n                      valueCheck = property.valueChanges.pipe(map(_chk));\n                    }\n                    const visibilityCheck = property._visibilityChanges;\n                    const and = combineLatest([valueCheck, visibilityCheck], (v1, v2) => v1 && v2);\n                    propertiesBinding.push(and);\n                  }\n                }\n              } else {\n                console.warn('Can\\'t find property ' + dependencyPath + ' for visibility check of ' + this.path);\n                this.registerMissingVisibilityBinding(dependencyPath, this);\n                // not visible if not existent\n                this.setVisible(false);\n              }\n            }\n          }\n\n          combineLatest(propertiesBinding, (...values: boolean[]) => {\n            return values.indexOf(true) !== -1;\n          }).pipe(distinctUntilChanged()).subscribe((visible) => {\n            this.setVisible(visible);\n          });\n        }\n      }\n      return true;\n    }\n  }\n\n  // A field is visible if AT LEAST ONE of the properties it depends on is visible AND has a value in the list\n  public _bindVisibility() {\n    if (this.__bindVisibility())\n      return;\n    let visibleIf = this.schema.visibleIf;\n    if (typeof visibleIf === 'object' && Object.keys(visibleIf).length === 0) {\n      this.setVisible(false);\n    } else if (visibleIf !== undefined) {\n      let propertiesBinding = [];\n      for (let dependencyPath in visibleIf) {\n        if (visibleIf.hasOwnProperty(dependencyPath)) {\n          const properties = this.findProperties(this, dependencyPath);\n          if ((properties || []).length) {\n            for (const property of properties) {\n              if (property) {\n                const valueCheck = property.valueChanges.pipe(map(\n                  value => {\n                    if (visibleIf[dependencyPath].indexOf('$ANY$') !== -1) {\n                      return value.length > 0;\n                    } else {\n                      return visibleIf[dependencyPath].indexOf(value) !== -1;\n                    }\n                  }\n                ));\n                const visibilityCheck = property._visibilityChanges;\n                const and = combineLatest([valueCheck, visibilityCheck], (v1, v2) => v1 && v2);\n                propertiesBinding.push(and);\n              }\n            }\n          } else {\n            console.warn('Can\\'t find property ' + dependencyPath + ' for visibility check of ' + this.path);\n            this.registerMissingVisibilityBinding(dependencyPath, this);\n            // not visible if not existent\n            this.setVisible(false);\n          }\n        }\n      }\n\n      combineLatest(propertiesBinding, (...values: boolean[]) => {\n        return values.indexOf(true) !== -1;\n      }).pipe(distinctUntilChanged()).subscribe((visible) => {\n        this.setVisible(visible);\n      });\n    }\n  }\n\n  private registerMissingVisibilityBinding(dependencyPath: string, formProperty: FormProperty) {\n    formProperty._propertyBindingRegistry.getPropertyBindingsVisibility().add(dependencyPath, formProperty.path);\n  }\n\n\n  /**\n   * Finds all <code>formProperties</code> from a path with wildcards.<br/>\n   * e.g: <code>/garage/cars/&#42;/tires/&#42;/name</code><br/>\n   * @param target\n   * @param propertyPath\n   */\n  findProperties(target: FormProperty, propertyPath: string): FormProperty[] {\n    const props: FormProperty[] = [];\n    const paths = this.findPropertyPaths(target, propertyPath);\n    for (const path of paths) {\n      const p: FormProperty = target.searchProperty(path);\n      if (p) {\n        props.push(p);\n      }\n    }\n    return props;\n  }\n\n  /**\n   * Creates canonical paths from a path with wildcards.\n   * e.g:<br/>\n   * From:<br/>\n   * <code>/garage/cars/&#42;/tires/&#42;/name</code><br/>\n   * it creates:<br/>\n   * <code>/garage/cars/0/tires/0/name</code><br/>\n   * <code>/garage/cars/0/tires/1/name</code><br/>\n   * <code>/garage/cars/0/tires/2/name</code><br/>\n   * <code>/garage/cars/0/tires/3/name</code><br/>\n   * <code>/garage/cars/1/tires/0/name</code><br/>\n   * <code>/garage/cars/2/tires/1/name</code><br/>\n   * <code>/garage/cars/3/tires/2/name</code><br/>\n   * <code>/garage/cars/3/tires/3/name</code><br/>\n   * <code>/garage/cars/&#42;/tires/&#42;/name</code><br/>\n   * <code>/garage/cars/&#42;/tires/2/name</code><br/>\n   * <code>/garage/cars/&#42;/tires/3/name</code><br/>\n   * <br/>etc...\n   * @param target\n   * @param path\n   * @param parentPath\n   */\n  findPropertyPaths(target: FormProperty, path: string, parentPath?: string): string[] {\n    const ix = path.indexOf('*');\n    if (-1 !== ix) {\n      const prePath = ix > -1 ? path.substring(0, ix - 1) : path;\n      const subPath = ix > -1 ? path.substring(ix + 1) : path;\n      const prop: FormProperty = target.searchProperty(prePath);\n      let pathFound = [];\n      if (prop instanceof PropertyGroup) {\n        const arrProp = prop.properties as FormProperty[];\n        for (let i = 0; i < arrProp.length; i++) {\n          const curreItemPath = (parentPath || '') + prePath + (prePath.endsWith('/') ? '' : '/') + i + subPath;\n          const curreItemPrePath = (parentPath || '') + prePath + i;\n          if (-1 === curreItemPath.indexOf('*')) {\n            pathFound.push(curreItemPath);\n          }\n          const childrenPathFound = this.findPropertyPaths(arrProp[i], subPath, curreItemPrePath);\n          pathFound = pathFound.concat(childrenPathFound);\n        }\n      }\n      return pathFound;\n    }\n    return [path];\n  }\n}\n\nexport abstract class PropertyGroup extends FormProperty {\n\n  _properties: FormProperty[] | { [key: string]: FormProperty } = null;\n\n  get properties() {\n    return this._properties;\n  }\n\n  set properties(properties: FormProperty[] | { [key: string]: FormProperty }) {\n    /**\n     * Override the setter to add an observer that notices when an item is added or removed.<br/>\n     */\n    this._properties = new Proxy(properties, this._propertyProxyHandler);\n  }\n\n  private _propertyProxyHandler: ProxyHandler<FormProperty[] | { [key: string]: FormProperty }> = {\n    /**\n     * When a new item is added it will be checked for visibility updates to proceed <br/>\n     * if any other field has a binding reference to it.<br/>\n     */\n    set(target: FormProperty[] | { [p: string]: FormProperty }, p: PropertyKey, value: any, receiver: any): boolean {\n\n      /**\n       * 1) Make sure a canonical path is set\n       */\n      const assertCanonicalPath = (propertyValue: any) => {\n        const formProperty = propertyValue as FormProperty;\n        if (Array.isArray(target) && propertyValue instanceof FormProperty) {\n          /**\n           * Create a canonical path replacing the last '*' with the elements position in array\n           * @param propertyPath\n           * @param indexOfChild\n           */\n          const getCanonicalPath = (propertyPath: string, indexOfChild: number) => {\n            let pos;\n            if (propertyPath && -1 !== (pos = propertyPath.lastIndexOf('*'))) {\n              return propertyPath.substring(0, pos) + indexOfChild.toString() + propertyPath.substring(pos + 1);\n            }\n          };\n          if (formProperty) {\n            formProperty._canonicalPath = getCanonicalPath(formProperty._canonicalPath, p as number);\n          }\n        }\n\n        const propertyGroup = formProperty as PropertyGroup;\n        const propertyGroupChildren = (Array.isArray(propertyGroup.properties) ?\n          propertyGroup.properties :\n          Object.values(propertyGroup.properties || {})) as FormProperty[];\n        if ((formProperty.path || '').endsWith('/*')) {\n          /**\n           * If it is an array, then all children canonical paths must be computed now.\n           * The children don't have the parent's path segment set yet,\n           * because they are created before the parent gets attached to its parent.\n           */\n          for (const child of propertyGroupChildren) {\n            child._canonicalPath = formProperty._canonicalPath + child._canonicalPath.substring(formProperty.path.length);\n          }\n        }\n        return {property: formProperty, children: propertyGroupChildren};\n      };\n      const {property, children} = assertCanonicalPath(value);\n\n      /**\n       * 2) Add the new property before rebinding, so it can be found by <code>_bindVisibility</code>\n       */\n      const result = target[p as string] = value;\n\n      /**\n       * 3) Re-bind the visibility bindings referencing to this canonical paths\n       */\n      const rebindVisibility = () => {\n        const rebindAll = [property].concat(children);\n        const findPropertiesToRebind = (formProperty: FormProperty) => {\n          const propertyBindings = formProperty._propertyBindingRegistry.getPropertyBindingsVisibility();\n          let rebind: string[] = [];\n          if (formProperty._canonicalPath) {\n            rebind = rebind.concat(rebind.concat(propertyBindings.findByDependencyPath(formProperty._canonicalPath) || []));\n            if (formProperty._canonicalPath.startsWith('/')) {\n              rebind = rebind.concat(rebind.concat(propertyBindings.findByDependencyPath(formProperty._canonicalPath.substring(1)) || []));\n            }\n          }\n          rebind = rebind.concat(propertyBindings.findByDependencyPath(formProperty.path) || []);\n          if (formProperty.path.startsWith('/')) {\n            rebind = rebind.concat(rebind.concat(propertyBindings.findByDependencyPath(formProperty.path.substring(1)) || []));\n          }\n          const uniqueValues = {};\n          for (const item of rebind) {\n            uniqueValues[item] = item;\n          }\n          return Object.keys(uniqueValues);\n        };\n        for (const _property of rebindAll) {\n          if (_property instanceof FormProperty) {\n            try {\n              const rebindPaths = findPropertiesToRebind(_property);\n              for (const rebindPropPath of rebindPaths) {\n                const rebindProp = _property.searchProperty(rebindPropPath);\n                rebindProp._bindVisibility();\n              }\n            } catch (e) {\n              console.error('Rebinding visibility error at path:', _property.path, 'property:', _property, e);\n            }\n          }\n        }\n      };\n      rebindVisibility();\n\n      return result;\n    },\n    get(target: FormProperty[] | { [p: string]: FormProperty }, p: PropertyKey, receiver: any): any {\n      return target[p as string];\n    },\n    deleteProperty(target: FormProperty[] | { [p: string]: FormProperty }, p: PropertyKey): boolean {\n      return delete target[p as string];\n    }\n  };\n\n  getProperty(path: string) {\n    let subPathIdx = path.indexOf('/');\n    let propertyId = subPathIdx !== -1 ? path.substr(0, subPathIdx) : path;\n\n    let property = this.properties[propertyId];\n    if (property !== null && subPathIdx !== -1 && property instanceof PropertyGroup) {\n      let subPath = path.substr(subPathIdx + 1);\n      property = (<PropertyGroup>property).getProperty(subPath);\n    }\n    return property;\n  }\n\n  public forEachChild(fn: (formProperty: FormProperty, str: String) => void) {\n    for (let propertyId in this.properties) {\n      if (this.properties.hasOwnProperty(propertyId)) {\n        let property = this.properties[propertyId];\n        fn(property, propertyId);\n      }\n    }\n  }\n\n  public forEachChildRecursive(fn: (formProperty: FormProperty) => void) {\n    this.forEachChild((child) => {\n      fn(child);\n      if (child instanceof PropertyGroup) {\n        (<PropertyGroup>child).forEachChildRecursive(fn);\n      }\n    });\n  }\n\n  public _bindVisibility() {\n    super._bindVisibility();\n    this._bindVisibilityRecursive();\n  }\n\n  private _bindVisibilityRecursive() {\n    this.forEachChildRecursive((property) => {\n      property._bindVisibility();\n    });\n  }\n\n  public isRoot() {\n    return this === this.root;\n  }\n}\n\n\n","import {FormProperty} from './formproperty';\n\nexport abstract class AtomicProperty extends FormProperty {\n\n  setValue(value, onlySelf = false) {\n    this._value = value;\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  reset(value: any = null, onlySelf = true) {\n    this.resetValue(value);\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  resetValue(value: any): any {\n    if (value === null) {\n      if (this.schema.default !== undefined) {\n        value = this.schema.default;\n      } else {\n        value = this.fallbackValue();\n      }\n    }\n    this._value = value;\n  }\n\n  public _hasValue(): boolean {\n    return this.fallbackValue() !== this.value;\n  }\n\n  abstract fallbackValue(): any;\n\n  public _updateValue() {\n  }\n}\n","import {AtomicProperty} from './atomicproperty';\n\nexport class NumberProperty extends AtomicProperty {\n\n  fallbackValue() {\n    return null;\n  }\n\n  setValue(value, onlySelf = false) {\n    if (typeof value === 'string') {\n      if (value.length) {\n        value = value.indexOf('.') > -1 ? parseFloat(value) : parseInt(value, 10);\n      } else {\n        value = null;\n      }\n    }\n    this._value = value;\n    this.updateValueAndValidity(onlySelf, true);\n  }\n}\n","import { AtomicProperty } from './atomicproperty';\n\nexport class StringProperty extends AtomicProperty {\n\n  fallbackValue() {\n    return '';\n  }\n\n}\n","import { AtomicProperty } from './atomicproperty';\n\nexport class BooleanProperty extends AtomicProperty {\n\n  fallbackValue() {\n    return null;\n  }\n}\n","import {PropertyGroup} from './formproperty';\nimport {FormPropertyFactory} from './formpropertyfactory';\nimport {SchemaValidatorFactory} from '../schemavalidatorfactory';\nimport {ValidatorRegistry} from './validatorregistry';\n\nexport class ObjectProperty extends PropertyGroup {\n\n  private propertiesId: string[] = [];\n\n  constructor(private formPropertyFactory: FormPropertyFactory,\n              schemaValidatorFactory: SchemaValidatorFactory,\n              validatorRegistry: ValidatorRegistry,\n              schema: any,\n              parent: PropertyGroup,\n              path: string) {\n    super(schemaValidatorFactory, validatorRegistry, schema, parent, path);\n    this.createProperties();\n  }\n\n  setValue(value: any, onlySelf: boolean) {\n    for (const propertyId in value) {\n      if (value.hasOwnProperty(propertyId)) {\n        this.properties[propertyId].setValue(value[propertyId], true);\n      }\n    }\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  reset(value: any, onlySelf = true) {\n    value = value || this.schema.default || {};\n    this.resetProperties(value);\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  resetProperties(value: any) {\n    for (const propertyId in this.schema.properties) {\n      if (this.schema.properties.hasOwnProperty(propertyId)) {\n        this.properties[propertyId].reset(value[propertyId], true);\n      }\n    }\n  }\n\n  createProperties() {\n    this.properties = {};\n    this.propertiesId = [];\n    for (const propertyId in this.schema.properties) {\n      if (this.schema.properties.hasOwnProperty(propertyId)) {\n        const propertySchema = this.schema.properties[propertyId];\n        this.properties[propertyId] = this.formPropertyFactory.createProperty(propertySchema, this, propertyId);\n        this.propertiesId.push(propertyId);\n      }\n    }\n  }\n\n  public _hasValue(): boolean {\n    return !!Object.keys(this.value).length;\n  }\n\n  public _updateValue() {\n    this.reduceValue();\n  }\n\n  public _runValidation() {\n    super._runValidation();\n\n    if (this._errors) {\n      this._errors.forEach(error => {\n        const prop = this.searchProperty(error.path.slice(1));\n        if (prop) {\n          prop.extendErrors(error);\n        }\n      });\n    }\n  }\n\n  private reduceValue(): void {\n    const value = {};\n    this.forEachChild((property, propertyId: string) => {\n      if (property.visible && property._hasValue()) {\n        value[propertyId] = property.value;\n      }\n    });\n    this._value = value;\n  }\n}\n","import {FormProperty, PropertyGroup} from './formproperty';\nimport {FormPropertyFactory} from './formpropertyfactory';\nimport {SchemaValidatorFactory} from '../schemavalidatorfactory';\nimport {ValidatorRegistry} from './validatorregistry';\n\nexport class ArrayProperty extends PropertyGroup {\n\n  constructor(private formPropertyFactory: FormPropertyFactory,\n              schemaValidatorFactory: SchemaValidatorFactory,\n              validatorRegistry: ValidatorRegistry,\n              schema: any,\n              parent: PropertyGroup,\n              path: string) {\n    super(schemaValidatorFactory, validatorRegistry, schema, parent, path);\n  }\n\n  addItem(value: any = null): FormProperty {\n    let newProperty = this.addProperty();\n    newProperty.reset(value, false);\n    return newProperty;\n  }\n\n  private addProperty() {\n    let newProperty = this.formPropertyFactory.createProperty(this.schema.items, this);\n    (<FormProperty[]>this.properties).push(newProperty);\n    return newProperty;\n  }\n\n  removeItem(item: FormProperty) {\n    this.properties = (<FormProperty[]>this.properties).filter(i => i !== item);\n    this.updateValueAndValidity(false, true);\n  }\n\n  setValue(value: any, onlySelf: boolean) {\n    this.createProperties();\n    this.resetProperties(value);\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  public _hasValue(): boolean {\n    return true;\n  }\n\n  public _updateValue() {\n    this.reduceValue();\n  }\n\n  private reduceValue(): void {\n    const value = [];\n    this.forEachChild((property, _) => {\n      if (property.visible && property._hasValue()) {\n        value.push(property.value);\n      }\n    });\n    this._value = value;\n  }\n\n  reset(value: any, onlySelf = true) {\n    value = value || this.schema.default || [];\n    this.properties = [];\n    this.resetProperties(value);\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  private createProperties() {\n    this.properties = [];\n  }\n\n\n  private resetProperties(value: any) {\n    for (let idx in value) {\n      if (value.hasOwnProperty(idx)) {\n        let property = this.addProperty();\n        property.reset(value[idx], true);\n      }\n    }\n  }\n}\n","import {FormProperty, PropertyGroup} from './formproperty';\nimport {NumberProperty} from './numberproperty';\nimport {StringProperty} from './stringproperty';\nimport {BooleanProperty} from './booleanproperty';\nimport {ObjectProperty} from './objectproperty';\nimport {ArrayProperty} from './arrayproperty';\nimport {SchemaValidatorFactory} from '../schemavalidatorfactory';\nimport {ValidatorRegistry} from './validatorregistry';\nimport {PropertyBindingRegistry} from '../property-binding-registry';\n\nexport class FormPropertyFactory {\n\n  constructor(private schemaValidatorFactory: SchemaValidatorFactory, private validatorRegistry: ValidatorRegistry,\n              private propertyBindingRegistry: PropertyBindingRegistry) {\n  }\n\n  createProperty(schema: any, parent: PropertyGroup = null, propertyId?: string): FormProperty {\n    let newProperty = null;\n    let path = '';\n    let _canonicalPath = '';\n    if (parent) {\n      path += parent.path;\n      if (parent.parent !== null) {\n        path += '/';\n        _canonicalPath += '/';\n      }\n      if (parent.type === 'object') {\n        path += propertyId;\n        _canonicalPath += propertyId;\n      } else if (parent.type === 'array') {\n        path += '*';\n        _canonicalPath += '*';\n      } else {\n        throw 'Instanciation of a FormProperty with an unknown parent type: ' + parent.type;\n      }\n      _canonicalPath = (parent._canonicalPath || parent.path) + _canonicalPath;\n    } else {\n      path = '/';\n      _canonicalPath = '/';\n    }\n\n    if (schema.$ref) {\n      const refSchema = this.schemaValidatorFactory.getSchema(parent.root.schema, schema.$ref);\n      newProperty = this.createProperty(refSchema, parent, path);\n    } else {\n      switch (schema.type) {\n        case 'integer':\n        case 'number':\n          newProperty = new NumberProperty(this.schemaValidatorFactory, this.validatorRegistry, schema, parent, path);\n          break;\n        case 'string':\n          newProperty = new StringProperty(this.schemaValidatorFactory, this.validatorRegistry, schema, parent, path);\n          break;\n        case 'boolean':\n          newProperty = new BooleanProperty(this.schemaValidatorFactory, this.validatorRegistry, schema, parent, path);\n          break;\n        case 'object':\n          newProperty = new ObjectProperty(this, this.schemaValidatorFactory, this.validatorRegistry, schema, parent, path);\n          break;\n        case 'array':\n          newProperty = new ArrayProperty(this, this.schemaValidatorFactory, this.validatorRegistry, schema, parent, path);\n          break;\n        default:\n          throw new TypeError(`Undefined type ${schema.type}`);\n      }\n    }\n\n    newProperty._propertyBindingRegistry = this.propertyBindingRegistry;\n    newProperty._canonicalPath = _canonicalPath;\n\n    if (newProperty instanceof PropertyGroup) {\n      this.initializeRoot(newProperty);\n    }\n\n    return newProperty;\n  }\n\n  private initializeRoot(rootProperty: PropertyGroup) {\n    rootProperty.reset(null, true);\n    rootProperty._bindVisibility();\n  }\n}\n","import {isBlank} from './utils';\n\nfunction formatMessage(message, path) {\n  return `Parsing error on ${path}: ${message}`;\n}\n\nfunction schemaError(message, path): void {\n  let mesg = formatMessage(message, path);\n  throw new Error(mesg);\n}\n\nfunction schemaWarning(message, path): void {\n  let mesg = formatMessage(message, path);\n  throw new Error(mesg);\n}\n\nexport class SchemaPreprocessor {\n\n  static preprocess(jsonSchema: any, path = '/'): any {\n    jsonSchema = jsonSchema || {};\n    SchemaPreprocessor.normalizeExtensions(jsonSchema);\n    if (jsonSchema.type === 'object') {\n      SchemaPreprocessor.checkProperties(jsonSchema, path);\n      SchemaPreprocessor.checkAndCreateFieldsets(jsonSchema, path);\n    } else if (jsonSchema.type === 'array') {\n      SchemaPreprocessor.checkItems(jsonSchema, path);\n    }\n    SchemaPreprocessor.normalizeWidget(jsonSchema);\n    SchemaPreprocessor.recursiveCheck(jsonSchema, path);\n  }\n\n  private static checkProperties(jsonSchema, path: string) {\n    if (isBlank(jsonSchema.properties)) {\n      jsonSchema.properties = {};\n      schemaWarning('Provided json schema does not contain a \\'properties\\' entry. Output schema will be empty', path);\n    }\n  }\n\n  private static checkAndCreateFieldsets(jsonSchema: any, path: string) {\n    if (jsonSchema.fieldsets === undefined) {\n      if (jsonSchema.order !== undefined) {\n        SchemaPreprocessor.replaceOrderByFieldsets(jsonSchema);\n      } else {\n        SchemaPreprocessor.createFieldsets(jsonSchema);\n      }\n    }\n    SchemaPreprocessor.checkFieldsUsage(jsonSchema, path);\n  }\n\n  private static checkFieldsUsage(jsonSchema, path: string) {\n    let fieldsId: string[] = Object.keys(jsonSchema.properties);\n    let usedFields = {};\n    for (let fieldset of jsonSchema.fieldsets) {\n      for (let fieldId of fieldset.fields) {\n        if (usedFields[fieldId] === undefined) {\n          usedFields[fieldId] = [];\n        }\n        usedFields[fieldId].push(fieldset.id);\n      }\n    }\n\n    for (const fieldId of fieldsId) {\n      const isRequired = jsonSchema.required && jsonSchema.required.indexOf(fieldId) > -1;\n      if (isRequired && jsonSchema.properties[fieldId]) {\n        jsonSchema.properties[fieldId].isRequired = true;\n      }\n      if (usedFields.hasOwnProperty(fieldId)) {\n        if (usedFields[fieldId].length > 1) {\n          schemaError(`${fieldId} is referenced by more than one fieldset: ${usedFields[fieldId]}`, path);\n        }\n        delete usedFields[fieldId];\n      } else if (isRequired) {\n        schemaError(`${fieldId} is a required field but it is not referenced as part of a 'order' or a 'fieldset' property`, path);\n      } else {\n        delete jsonSchema[fieldId];\n        schemaWarning(`Removing unreferenced field ${fieldId}`, path);\n      }\n    }\n\n    for (let remainingfieldsId in usedFields) {\n      if (usedFields.hasOwnProperty(remainingfieldsId)) {\n        schemaWarning(`Referencing non-existent field ${remainingfieldsId} in one or more fieldsets`, path);\n      }\n    }\n  }\n\n  private static createFieldsets(jsonSchema) {\n    jsonSchema.order = Object.keys(jsonSchema.properties);\n    SchemaPreprocessor.replaceOrderByFieldsets(jsonSchema);\n  }\n\n  private static replaceOrderByFieldsets(jsonSchema) {\n    jsonSchema.fieldsets = [{\n      id: 'fieldset-default',\n      title: jsonSchema.title || '',\n      description: jsonSchema.description || '',\n      name: jsonSchema.name || '',\n      fields: jsonSchema.order\n    }];\n    delete jsonSchema.order;\n  }\n\n  private static normalizeWidget(fieldSchema: any) {\n    let widget = fieldSchema.widget;\n    if (widget === undefined) {\n      widget = {'id': fieldSchema.type};\n    } else if (typeof widget === 'string') {\n      widget = {'id': widget};\n    }\n    fieldSchema.widget = widget;\n  }\n\n  private static checkItems(jsonSchema, path) {\n    if (jsonSchema.items === undefined) {\n      schemaError('No \\'items\\' property in array', path);\n    }\n  }\n\n  private static recursiveCheck(jsonSchema, path: string) {\n    if (jsonSchema.type === 'object') {\n      for (let fieldId in jsonSchema.properties) {\n        if (jsonSchema.properties.hasOwnProperty(fieldId)) {\n          let fieldSchema = jsonSchema.properties[fieldId];\n          SchemaPreprocessor.preprocess(fieldSchema, path + fieldId + '/');\n        }\n      }\n      if (jsonSchema.hasOwnProperty('definitions')) {\n        for (let fieldId in jsonSchema.definitions) {\n          if (jsonSchema.definitions.hasOwnProperty(fieldId)) {\n            let fieldSchema = jsonSchema.definitions[fieldId];\n            SchemaPreprocessor.removeRecursiveRefProperties(fieldSchema, `#/definitions/${fieldId}`);\n            SchemaPreprocessor.preprocess(fieldSchema, path + fieldId + '/');\n          }\n        }\n      }\n    } else if (jsonSchema.type === 'array') {\n      SchemaPreprocessor.preprocess(jsonSchema.items, path + '*/');\n    }\n  }\n\n  private static removeRecursiveRefProperties(jsonSchema, definitionPath) {\n    // to avoid infinite loop\n    if (jsonSchema.type === 'object') {\n      for (let fieldId in jsonSchema.properties) {\n        if (jsonSchema.properties.hasOwnProperty(fieldId)) {\n          if (jsonSchema.properties[fieldId].$ref\n            && jsonSchema.properties[fieldId].$ref === definitionPath) {\n            delete jsonSchema.properties[fieldId];\n          } else if (jsonSchema.properties[fieldId].type === 'object') {\n            SchemaPreprocessor.removeRecursiveRefProperties(jsonSchema.properties[fieldId], definitionPath);\n          }\n        }\n      }\n    }\n  }\n  \n  /**\n   * Enables alias names for JSON schema extensions.\n   *\n   * Copies the value of each alias JSON schema property\n   * to the JSON schema property of ngx-schema-form.\n   *\n   * @param schema JSON schema to enable alias names.\n   */\n  private static normalizeExtensions(schema: any): void {\n    const extensions = [\n        { name: \"fieldsets\", regex: /^x-?field-?sets$/i },\n        { name: \"widget\",    regex: /^x-?widget$/i },\n        { name: \"visibleIf\", regex: /^x-?visible-?if$/i }\n    ];\n    const keys = Object.keys(schema);\n    for (let i = 0; i < keys.length; ++i) {\n      let k = keys[i];\n      let e = extensions.find(e => !!k.match(e.regex));\n      if (e) {\n        let v = schema[k];\n        let copy = JSON.parse(JSON.stringify(v));\n        schema[e.name] = copy;\n      }\n    }\n  }\n}\n\n","export function isPresent(o) {\n  return o !== null && o !== undefined;\n}\n\nexport function isBlank(o) {\n  return o === null || o === undefined;\n}\n","import { Validator } from './validator';\n\nexport class ValidatorRegistry {\n  private validators: Validator[] = [];\n\n  register(path: string, validator: Validator) {\n    this.validators[path] = validator;\n  }\n\n  get(path: string): Validator {\n    return this.validators[path];\n  }\n\n  clear() {\n    this.validators = [];\n  }\n}\n","import {Binding} from './binding';\n\nexport class BindingRegistry {\n  bindings: Binding[] = [];\n\n  clear() {\n    this.bindings = [];\n  }\n\n  register(path: string, binding: Binding | Binding[]) {\n    this.bindings[path] = [].concat(binding);\n  }\n\n  get(path: string): Binding[] {\n    return this.bindings[path];\n  }\n}\n","import * as ZSchema from 'z-schema';\n\nexport abstract class SchemaValidatorFactory {\n  abstract createValidatorFn(schema): (value: any) => any;\n\n  abstract getSchema(schema, ref): any;\n\n  /**\n   * Override this method to reset the schema validator instance.<br/>\n   * This may be required since some schema validators keep a deep copy<br/>\n   * of your schemas and changes at runtime are not recognized by the schema validator.<br/>\n   * In this method you should either re-instantiate the schema validator or\n   * clear its cache.<br/>\n   * Example of re-instantiating schema validator\n   * <code>\n   *     reset(){\n   *         this.zschema = new ZSchema({})\n   *     }\n   * </code>\n   * <br/>\n   * Since this method it self does nothing there is <br/>\n   * no need to call the <code>super.reset()</code>\n   */\n  reset() {\n\n  }\n}\n\nexport class ZSchemaValidatorFactory extends SchemaValidatorFactory {\n\n  protected zschema;\n\n  constructor() {\n    super();\n    this.createSchemaValidator()\n  }\n\n  private createSchemaValidator() {\n    this.zschema =  new ZSchema({\n      breakOnFirstError: false\n    });\n  }\n\n  reset() {\n    this.createSchemaValidator()\n  }\n\n  createValidatorFn(schema: any) {\n    return (value): { [key: string]: boolean } => {\n\n      if (schema.type === 'number' || schema.type === 'integer') {\n        value = +value;\n      }\n\n      this.zschema.validate(value, schema);\n      let err = this.zschema.getLastErrors();\n\n      this.denormalizeRequiredPropertyPaths(err);\n\n      return err || null;\n    };\n  }\n\n  getSchema(schema: any, ref: string) {\n    // check definitions are valid\n    const isValid = this.zschema.compileSchema(schema);\n    if (isValid) {\n      return this.getDefinition(schema, ref);\n    } else {\n      throw this.zschema.getLastError();\n    }\n  }\n\n  private denormalizeRequiredPropertyPaths(err: any[]) {\n    if (err && err.length) {\n      err = err.map(error => {\n        if (error.path === '#/' && error.code === 'OBJECT_MISSING_REQUIRED_PROPERTY') {\n          error.path = `${error.path}${error.params[0]}`;\n        }\n        return error;\n      });\n    }\n  }\n\n  private getDefinition(schema: any, ref: string) {\n    let foundSchema = schema;\n    ref.split('/').slice(1).forEach(ptr => {\n      if (ptr) {\n        foundSchema = foundSchema[ptr];\n      }\n    });\n    return foundSchema;\n  }\n}\n\n","export class WidgetRegistry {\n\n  private widgets: { [type: string]: any } = {};\n\n  private defaultWidget: any;\n\n  constructor() { }\n\n  setDefaultWidget(widget: any) {\n    this.defaultWidget = widget;\n  }\n\n  getDefaultWidget() {\n    return this.defaultWidget;\n  }\n\n  hasWidget(type: string) {\n    return this.widgets.hasOwnProperty(type);\n  }\n\n  register(type: string, widget: any) {\n    this.widgets[type] = widget;\n  }\n\n  getWidgetType(type: string): any {\n    if (this.hasWidget(type)) {\n      return this.widgets[type];\n    }\n    return this.defaultWidget;\n  }\n}\n","import {\n  ViewContainerRef,\n  ComponentRef,\n  ComponentFactoryResolver,\n  Injectable\n} from '@angular/core';\n\nimport { WidgetRegistry } from './widgetregistry';\n\n@Injectable()\nexport class WidgetFactory {\n\n  private resolver: ComponentFactoryResolver;\n  private registry: WidgetRegistry;\n\n  constructor(registry: WidgetRegistry, resolver: ComponentFactoryResolver) {\n    this.registry = registry;\n    this.resolver = resolver;\n  }\n\n  createWidget(container: ViewContainerRef, type: string): ComponentRef<any> {\n    let componentClass = this.registry.getWidgetType(type);\n\n    let componentFactory = this.resolver.resolveComponentFactory(componentClass);\n    return container.createComponent(componentFactory);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class TerminatorService {\n  public onDestroy: Subject<boolean>;\n\n  constructor() {\n    this.onDestroy = new Subject();\n  }\n\n  destroy() {\n    this.onDestroy.next(true);\n  }\n}\n","/**\n * General purpose propery binding registry\n */\nexport class PropertyBindingRegistry {\n\n  private bindings: { [key: string]: PropertyBindings } = {};\n\n  getPropertyBindings(type: PropertyBindingTypes): PropertyBindings {\n    this.bindings[type] = this.bindings[type] || new PropertyBindings();\n    return this.bindings[type];\n  }\n\n  getPropertyBindingsVisibility() {\n    return this.getPropertyBindings(PropertyBindingTypes.visibility);\n  }\n}\n\n/**\n * Defines the types of supported property bindings.<br/>\n * For now only <code>visibility</code> is supported.<br/>\n */\nexport enum PropertyBindingTypes {\n  visibility\n}\n\n/**\n * Storage that holds all bindings that are property paths related.<br/>\n */\nexport class PropertyBindings {\n  sourcesIndex: SimplePropertyIndexer = new SimplePropertyIndexer();\n  dependenciesIndex: SimplePropertyIndexer = new SimplePropertyIndexer();\n\n  add(dependencyPath: string, sourcePropertyPath: string) {\n    this.sourcesIndex.store(sourcePropertyPath, dependencyPath);\n    this.dependenciesIndex.store(dependencyPath, sourcePropertyPath);\n  }\n\n  findByDependencyPath(dependencyPath: string): string[] {\n    const result = this.dependenciesIndex.find(dependencyPath);\n    result.results = result.results || [];\n    let values = [];\n    for (const res of result.results) {\n      values = values.concat(Object.keys(res.value));\n    }\n    return result.found ? values : [];\n  }\n\n  getBySourcePropertyPath(sourcePropertyPath: string): string[] {\n    const result = this.sourcesIndex.find(sourcePropertyPath);\n    result.results = result.results || [];\n    let values = [];\n    for (const res of result.results) {\n      values = values.concat(Object.keys(res.value));\n    }\n    return result.found ? values : [];\n  }\n\n  createPathIndex(path: string): string[] {\n    return path.split('/');\n  }\n}\n\n/**\n * Simple indexer to store property paths\n */\nexport class SimplePropertyIndexer {\n\n  static MARKER = '$____value';\n  index: object = {};\n  findOnlyWithValue = true;\n\n  private _createPathIndex(path: string) {\n    return path\n      .replace(new RegExp('//', 'g'), '/')\n      .replace(new RegExp('^/', 'g'), '')\n      .split('/').filter(item => item);\n  }\n\n  store(propertyPath: string, value?: any) {\n    this._storeIndex(this._createPathIndex(propertyPath), value);\n  }\n\n  private _storeIndex(pathIndex: string[], value?: string) {\n    let indexPos = this.index;\n    for (const key of pathIndex) {\n      indexPos[key] = indexPos[key] || {};\n      indexPos = indexPos[key];\n    }\n    if (indexPos && value) {\n      indexPos[SimplePropertyIndexer.MARKER] = indexPos[SimplePropertyIndexer.MARKER] || {};\n      indexPos[SimplePropertyIndexer.MARKER][value] = value;\n    }\n  }\n\n  /**\n   * Find path in index.<br/>\n   * Will find path like:<br/>\n   * <ul>\n   *     <li>/property/0/prop</li>\n   *     <li>/property/0/prop/2/test</li>\n   *     <li>/property/0/prop/&#42;/test</li>\n   *     <li>/property/&#42;/prop/1/test</li>\n   *     <li>/property/&#42;/prop/&#42;/test</li>\n   *     <li>/property/1/prop/&#42;/test</li>\n   *  </ul>\n   * @param path\n   */\n  find(path: string): IndexerResult {\n    return this._findInIndex(this._createPathIndex(path));\n  }\n\n  _findInIndex(path: string[]): IndexerResult {\n    const ixRes: IndexerResult = {target: path, found: false, results: []};\n    this.__findIndex(ixRes, path, this.index, []);\n    return ixRes;\n  }\n\n  __findIndex(indexerResults: IndexerResult, path: string[], index: object, parent?: string[]) {\n\n    const p = parent || [];\n    const segment = path[0];\n    const wild = ('*' === segment) ? Object.keys(index) : [];\n    const _keys = ((Array.isArray(segment) ? segment : [segment]) as string[]).concat(wild);\n    const keys = _keys.filter((item, pos) => '*' !== item && _keys.indexOf(item) === pos); // remove duplicates\n\n    if (index['*']) {\n      keys.push('*');\n    }\n\n    let paths = [];\n    for (const key of keys) {\n      const restPath = path.slice(1);\n      const restIndex = index[key];\n      const restParent = p.concat(key);\n\n      if (path.length === 1) {// collect only the full paths\n        if (!this.findOnlyWithValue || (restIndex && restIndex[SimplePropertyIndexer.MARKER])) {\n          indexerResults.results = indexerResults.results || [];\n          indexerResults.results.push({\n            path: restParent,\n            value: restIndex[SimplePropertyIndexer.MARKER]\n          });\n          paths.push(restParent);\n          indexerResults.found = indexerResults.results.length > 0;\n        }\n      }\n\n      if (!restPath || !restPath.length || !restIndex) {\n        break;\n      }\n      const restPaths = this.__findIndex(indexerResults, restPath, restIndex, restParent);\n\n      paths = paths.concat(restPaths);\n    }\n    return paths;\n  }\n\n}\n\nexport interface IndexerResult {\n  /**\n   * The path originally searched for\n   */\n  target: string[];\n  /**\n   * Flag for the status of found or not found.<br/>\n   * Usually <code>results</code> will be empty if no matches found.\n   */\n  found: boolean;\n  /**\n   * The result path and values from the index search.<br/>\n   * Usually <code>results</code> will be empty if no matches found.\n   */\n  results: {\n    /**\n     * The path that matched the <code>target</code>\n     * separated in segments\n     */\n    path: string[],\n    /**\n     * The value stored at the <code>path</code>\n     */\n    value: any\n  }[];\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnChanges,\n  EventEmitter,\n  Input,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport {Action} from './model/action';\nimport {ActionRegistry} from './model/actionregistry';\nimport {FormProperty} from './model/formproperty';\nimport {FormPropertyFactory} from './model/formpropertyfactory';\nimport {SchemaPreprocessor} from './model/schemapreprocessor';\nimport {ValidatorRegistry} from './model/validatorregistry';\nimport {Validator} from './model/validator';\nimport {Binding} from './model/binding';\nimport {BindingRegistry} from './model/bindingregistry';\n\nimport {SchemaValidatorFactory} from './schemavalidatorfactory';\nimport {WidgetFactory} from './widgetfactory';\nimport {TerminatorService} from './terminator.service';\nimport {PropertyBindingRegistry} from './property-binding-registry';\n\nexport function useFactory(schemaValidatorFactory, validatorRegistry, propertyBindingRegistry) {\n  return new FormPropertyFactory(schemaValidatorFactory, validatorRegistry, propertyBindingRegistry);\n}\n\n@Component({\n  selector: 'sf-form',\n  template: `\n    <form>\n      <sf-form-element\n        *ngIf=\"rootProperty\" [formProperty]=\"rootProperty\"></sf-form-element>\n    </form>`,\n  providers: [\n    ActionRegistry,\n    ValidatorRegistry,\n    PropertyBindingRegistry,\n    BindingRegistry,\n    SchemaPreprocessor,\n    WidgetFactory,\n    {\n      provide: FormPropertyFactory,\n      useFactory: useFactory,\n      deps: [SchemaValidatorFactory, ValidatorRegistry, PropertyBindingRegistry]\n    },\n    TerminatorService,\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: FormComponent,\n      multi: true\n    }\n  ]\n})\nexport class FormComponent implements OnChanges, ControlValueAccessor {\n\n  @Input() schema: any = null;\n\n  @Input() model: any;\n\n  @Input() actions: { [actionId: string]: Action } = {};\n\n  @Input() validators: { [path: string]: Validator } = {};\n\n  @Input() bindings: { [path: string]: Binding } = {};\n\n  @Output() onChange = new EventEmitter<{ value: any }>();\n\n  @Output() modelChange = new EventEmitter<any>();\n\n  @Output() isValid = new EventEmitter<boolean>();\n\n  @Output() onErrorChange = new EventEmitter<{ value: any[] }>();\n\n  @Output() onErrorsChange = new EventEmitter<{value: any}>();\n\n  rootProperty: FormProperty = null;\n\n  private onChangeCallback: any;\n\n  constructor(\n    private formPropertyFactory: FormPropertyFactory,\n    private actionRegistry: ActionRegistry,\n    private validatorRegistry: ValidatorRegistry,\n    private bindingRegistry: BindingRegistry,\n    private cdr: ChangeDetectorRef,\n    private terminator: TerminatorService\n  ) { }\n\n  writeValue(obj: any) {\n    if (this.rootProperty) {\n      this.rootProperty.reset(obj, false);\n    }\n  }\n\n  registerOnChange(fn: any) {\n    this.onChangeCallback = fn;\n    if (this.rootProperty) {\n      this.rootProperty.valueChanges.subscribe(\n        this.onValueChanges.bind(this)\n      );\n    }\n  }\n\n  // TODO implement\n  registerOnTouched(fn: any) {\n  }\n\n  // TODO implement\n  // setDisabledState(isDisabled: boolean)?: void\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.validators) {\n      this.setValidators();\n    }\n\n    if (changes.actions) {\n      this.setActions();\n    }\n\n    if (changes.bindings) {\n      this.setBindings();\n    }\n\n    if (this.schema && !this.schema.type) {\n      this.schema.type = 'object';\n    }\n\n    if (this.schema && changes.schema) {\n      if (!changes.schema.firstChange) {\n        this.terminator.destroy();\n      }\n\n      SchemaPreprocessor.preprocess(this.schema);\n      this.rootProperty = this.formPropertyFactory.createProperty(this.schema);\n      if (this.model) {\n        // this.rootProperty.reset(this.model, false);\n      }\n\n      this.rootProperty.valueChanges.subscribe(\n        this.onValueChanges.bind(this)\n      );\n\n      this.rootProperty.errorsChanges.subscribe(value => {\n        this.onErrorChange.emit({value: value});\n        this.isValid.emit(!(value && value.length));\n      });\n\n    }\n\n    if (this.schema && (changes.model || changes.schema )) {\n      this.rootProperty.reset(this.model, false);\n      this.cdr.detectChanges();\n    }\n\n  }\n\n  private setValidators() {\n    this.validatorRegistry.clear();\n    if (this.validators) {\n      for (const validatorId in this.validators) {\n        if (this.validators.hasOwnProperty(validatorId)) {\n          this.validatorRegistry.register(validatorId, this.validators[validatorId]);\n        }\n      }\n    }\n  }\n\n  private setActions() {\n    this.actionRegistry.clear();\n    if (this.actions) {\n      for (const actionId in this.actions) {\n        if (this.actions.hasOwnProperty(actionId)) {\n          this.actionRegistry.register(actionId, this.actions[actionId]);\n        }\n      }\n    }\n  }\n\n  private setBindings() {\n    this.bindingRegistry.clear();\n    if (this.bindings) {\n      for (const bindingPath in this.bindings) {\n        if (this.bindings.hasOwnProperty(bindingPath)) {\n          this.bindingRegistry.register(bindingPath, this.bindings[bindingPath]);\n        }\n      }\n    }\n  }\n\n  public reset() {\n    this.rootProperty.reset(null, true);\n  }\n\n  private setModel(value: any) {\n    if (this.model) {\n      Object.assign(this.model, value);\n    } else {\n      this.model = value;\n    }\n  }\n\n  private onValueChanges(value) {\n    if (this.onChangeCallback) {\n      this.setModel(value);\n      this.onChangeCallback(value);\n    }\n\n    // two way binding is used\n    if (this.modelChange.observers.length > 0) {\n      if (!this.onChangeCallback) {\n        this.setModel(value);\n      }\n    }\n    this.onChange.emit({value: value});\n  }\n}\n","import {\n  Component, ElementRef,\n  Input, OnDestroy,\n  OnInit, Renderer2\n} from '@angular/core';\n\nimport {\n  FormControl\n} from '@angular/forms';\n\nimport {Widget} from './widget';\n\nimport {ActionRegistry} from './model/actionregistry';\nimport {FormProperty} from './model/formproperty';\nimport {BindingRegistry} from './model/bindingregistry';\nimport {Binding} from './model/binding';\n\n@Component({\n  selector: 'sf-form-element',\n  template: `\n    <div *ngIf=\"formProperty.visible\"\n         [class.has-error]=\"!control.valid\"\n         [class.has-success]=\"control.valid\">\n      <sf-widget-chooser\n        (widgetInstanciated)=\"onWidgetInstanciated($event)\"\n        [widgetInfo]=\"formProperty.schema.widget\">\n      </sf-widget-chooser>\n      <sf-form-element-action *ngFor=\"let button of buttons\" [button]=\"button\" [formProperty]=\"formProperty\"></sf-form-element-action>\n    </div>`\n})\nexport class FormElementComponent implements OnInit, OnDestroy {\n\n  private static counter = 0;\n\n  @Input() formProperty: FormProperty;\n  control: FormControl = new FormControl('', () => null);\n\n  widget: Widget<any> = null;\n\n  buttons = [];\n\n  unlisten = [];\n\n  constructor(private actionRegistry: ActionRegistry,\n              private bindingRegistry: BindingRegistry,\n              private renderer: Renderer2,\n              private elementRef: ElementRef) {\n  }\n\n  ngOnInit() {\n    this.parseButtons();\n    this.setupBindings();\n  }\n\n  private setupBindings() {\n    const bindings: Binding[] = this.bindingRegistry.get(this.formProperty.path);\n    if ((bindings || []).length) {\n      bindings.forEach((binding) => {\n        for (const eventId in binding) {\n          this.createBinding(eventId, binding[eventId]);\n        }\n      });\n    }\n  }\n\n  private createBinding(eventId, listener) {\n    this.unlisten.push(this.renderer.listen(this.elementRef.nativeElement,\n      eventId,\n      (event) => {\n        if (listener instanceof Function) {\n          listener(event, this.formProperty);\n        } else {\n          console.warn('Calling non function handler for eventId ' + eventId + ' for path ' + this.formProperty.path);\n        }\n      }));\n  }\n\n  private parseButtons() {\n    if (this.formProperty.schema.buttons !== undefined) {\n      this.buttons = this.formProperty.schema.buttons;\n\n      for (let button of this.buttons) {\n        this.createButtonCallback(button);\n      }\n    }\n  }\n\n  private createButtonCallback(button) {\n    button.action = (e) => {\n      let action;\n      if (button.id && (action = this.actionRegistry.get(button.id))) {\n        if (action) {\n          action(this.formProperty, button.parameters);\n        }\n      }\n      e.preventDefault();\n    };\n  }\n\n  onWidgetInstanciated(widget: Widget<any>) {\n    this.widget = widget;\n    let id = 'field' + (FormElementComponent.counter++);\n\n    this.widget.formProperty = this.formProperty;\n    this.widget.schema = this.formProperty.schema;\n    this.widget.name = id;\n    this.widget.id = id;\n    this.widget.control = this.control;\n  }\n\n  ngOnDestroy(): void {\n    if (this.unlisten) {\n      this.unlisten.forEach((item) => {\n        item();\n      });\n    }\n  }\n\n}\n","import {\n  Component,\n  ComponentRef,\n  Input,\n  OnChanges,\n  ViewChild,\n  ViewContainerRef,\n  OnInit,\n  OnDestroy\n} from \"@angular/core\";\nimport {Subscription} from 'rxjs';\nimport {WidgetFactory} from \"./widgetfactory\";\nimport {TerminatorService} from \"./terminator.service\";\n\n@Component({\n  selector: 'sf-form-element-action',\n  template: '<ng-template #target></ng-template>'\n})\nexport class FormElementComponentAction implements OnInit, OnChanges, OnDestroy {\n\n  @Input()\n  button: any;\n\n  @Input()\n  formProperty: any;\n\n  @ViewChild('target', {read: ViewContainerRef}) container: ViewContainerRef;\n\n  private ref: ComponentRef<any>;\n  private subs: Subscription;\n\n  constructor(private widgetFactory: WidgetFactory = null,\n              private terminator: TerminatorService) {\n  }\n\n  ngOnInit() {\n    this.subs = this.terminator.onDestroy.subscribe(destroy => {\n      if (destroy) {\n        this.ref.destroy();\n      }\n    });\n  }\n\n  ngOnChanges() {\n    this.ref = this.widgetFactory.createWidget(this.container, this.button.widget || 'button');\n    this.ref.instance.button = this.button;\n    this.ref.instance.formProperty = this.formProperty;\n  }\n\n  ngOnDestroy() {\n    this.subs.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ComponentRef,\n  ChangeDetectorRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  OnInit,\n  OnDestroy\n} from '@angular/core';\nimport { TerminatorService } from './terminator.service';\nimport { WidgetFactory } from './widgetfactory';\nimport { Subscription } from 'rxjs';\n\n\n@Component({\n  selector: 'sf-widget-chooser',\n  template: `<div #target></div>`,\n})\nexport class WidgetChooserComponent implements OnInit, OnChanges, OnDestroy {\n\n  @Input() widgetInfo: any;\n\n  @Output() widgetInstanciated = new EventEmitter<any>();\n\n  @ViewChild('target', {read: ViewContainerRef}) container: ViewContainerRef;\n\n  private widgetInstance: any;\n  private ref: ComponentRef<any>;\n  private subs: Subscription;\n\n  constructor(\n    private widgetFactory: WidgetFactory = null,\n    private cdr: ChangeDetectorRef,\n    private terminator: TerminatorService,\n  ) { }\n\n  ngOnInit() {\n    this.subs = this.terminator.onDestroy.subscribe(destroy => {\n      if (destroy) {\n        this.ref.destroy();\n      }\n    });\n  }\n\n  ngOnChanges() {\n    this.ref = this.widgetFactory.createWidget(this.container, this.widgetInfo.id);\n    this.widgetInstanciated.emit(this.ref.instance);\n    this.widgetInstance = this.ref.instance;\n    this.cdr.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this.subs.unsubscribe();\n  }\n}\n","import {AfterViewInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\n\nimport {ArrayProperty} from './model/arrayproperty';\nimport {FormProperty} from './model/formproperty';\nimport {ObjectProperty} from './model/objectproperty';\n\nexport abstract class Widget<T extends FormProperty> {\n  formProperty: T;\n  control: FormControl;\n  errorMessages: string[];\n\n  id: string = '';\n  name: string = '';\n  schema: any = {};\n}\n\nexport class ControlWidget extends Widget<FormProperty> implements AfterViewInit {\n\n  ngAfterViewInit() {\n    const control = this.control;\n    this.formProperty.valueChanges.subscribe((newValue) => {\n      if (control.value !== newValue) {\n        control.setValue(newValue, {emitEvent: false});\n      }\n    });\n    this.formProperty.errorsChanges.subscribe((errors) => {\n      control.setErrors(errors, { emitEvent: true });\n      const messages = (errors || [])\n        .filter(e => {\n          return e.path && e.path.slice(1) === this.formProperty.path;\n        })\n        .map(e => e.message);\n      this.errorMessages = messages.filter((m, i) => messages.indexOf(m) === i);\n    });\n    control.valueChanges.subscribe((newValue) => {\n      this.formProperty.setValue(newValue, false);\n    });\n  }\n\n}\n\nexport class ArrayLayoutWidget extends Widget<ArrayProperty> implements AfterViewInit {\n\n  ngAfterViewInit() {\n    const control = this.control;\n    this.formProperty.errorsChanges.subscribe((errors) => {\n      control.setErrors(errors, {emitEvent: true});\n    });\n  }\n}\n\nexport class ObjectLayoutWidget extends Widget<ObjectProperty> implements AfterViewInit {\n\n  ngAfterViewInit() {\n    const control = this.control;\n    this.formProperty.errorsChanges.subscribe((errors) => {\n      control.setErrors(errors, {emitEvent: true});\n    });\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { ArrayLayoutWidget } from '../../widget';\nimport { FormProperty } from '../../model';\n\n@Component({\n  selector: 'sf-array-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n\t<span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<div *ngFor=\"let itemProperty of formProperty.properties\">\n\t\t<sf-form-element [formProperty]=\"itemProperty\"></sf-form-element>\n\t\t<button (click)=\"removeItem(itemProperty)\" class=\"btn btn-default array-remove-button\">\n\t\t\t<span class=\"glyphicon glyphicon-minus\" aria-hidden=\"true\"></span> Remove\n\t\t</button>\n\t</div>\n\t<button (click)=\"addItem()\" class=\"btn btn-default array-add-button\">\n\t\t<span class=\"glyphicon glyphicon-plus\" aria-hidden=\"true\"></span> Add\n\t</button>\n</div>`\n})\nexport class ArrayWidget extends ArrayLayoutWidget {\n\n  addItem() {\n    this.formProperty.addItem();\n  }\n\n  removeItem(item: FormProperty) {\n    this.formProperty.removeItem(item);\n  }\n\n  trackByIndex(index: number, item: any) {\n    return index;\n  }\n}\n","import {Component} from \"@angular/core\";\n\n@Component({\n  selector: 'sf-button-widget',\n  template: '<button (click)=\"button.action($event)\">{{button.label}}</button>'\n})\nexport class ButtonWidget {\n  public button\n  public formProperty\n}\n","import { Component } from '@angular/core';\n\nimport { ObjectLayoutWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-form-object',\n  template: `<fieldset *ngFor=\"let fieldset of formProperty.schema.fieldsets\">\n\t<legend *ngIf=\"fieldset.title\">{{fieldset.title}}</legend>\n\t<div *ngIf=\"fieldset.description\">{{fieldset.description}}</div>\n\t<div *ngFor=\"let fieldId of fieldset.fields\">\n\t\t<sf-form-element [formProperty]=\"formProperty.getProperty(fieldId)\"></sf-form-element>\n\t</div>\n</fieldset>`\n})\nexport class ObjectWidget extends ObjectLayoutWidget { }\n","import { Component, AfterViewInit } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-checkbox-widget',\n  template: `<div class=\"widget form-group\">\n    <label [attr.for]=\"id\" class=\"horizontal control-label\">\n        {{ schema.title }}\n    </label>\n\t<div *ngIf=\"schema.type!='array'\" class=\"checkbox\">\n\t\t<label class=\"horizontal control-label\">\n\t\t\t<input [formControl]=\"control\" [attr.name]=\"name\" [indeterminate]=\"control.value !== false && control.value !== true ? true :null\" type=\"checkbox\" [disabled]=\"schema.readOnly\">\n\t\t\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n\t\t\t{{schema.description}}\n\t\t</label>\n\t</div>\n\t<ng-container *ngIf=\"schema.type==='array'\">\n\t\t<div *ngFor=\"let option of schema.items.oneOf\" class=\"checkbox\">\n\t\t\t<label class=\"horizontal control-label\">\n\t\t\t\t<input [attr.name]=\"name\"\n\t\t\t\t\tvalue=\"{{option.enum[0]}}\" type=\"checkbox\" \n\t\t\t\t\t[attr.disabled]=\"schema.readOnly\"\n\t\t\t\t\t(change)=\"onCheck($event.target)\"\n\t\t\t\t\t[attr.checked]=\"checked[option.enum[0]] ? true : null\">\n\t\t\t\t{{option.description}}\n\t\t\t</label>\n\t\t</div>\n\t</ng-container>\n</div>`\n})\nexport class CheckboxWidget extends ControlWidget implements AfterViewInit {\n\n\tchecked: any = {};\n\n\tngAfterViewInit() {\n\t\tconst control = this.control;\n\t\tthis.formProperty.valueChanges.subscribe((newValue) => {\n\t\t\tif (control.value !== newValue) {\n\t\t\t\tcontrol.setValue(newValue, { emitEvent: false });\n\t\t\t\tif (newValue && Array.isArray(newValue)) {\n\t\t\t\t\tnewValue.map(v => this.checked[v] = true);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.formProperty.errorsChanges.subscribe((errors) => {\n\t\t\tcontrol.setErrors(errors, { emitEvent: true });\n\t\t});\n\t\tcontrol.valueChanges.subscribe((newValue) => {\n\t\t\tthis.formProperty.setValue(newValue, false);\n\t\t});\n\t}\n\n\tonCheck(el) {\n\t\tif (el.checked) {\n\t\t\tthis.checked[el.value] = true;\n\t\t} else {\n\t\t\tdelete this.checked[el.value];\n\t\t}\n\t\tthis.formProperty.setValue(Object.keys(this.checked), false);\n\t}\n}\n","import { Component, AfterViewInit } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-file-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n  <input [name]=\"name\" class=\"text-widget file-widget\" [attr.id]=\"id\"\n    [formControl]=\"control\" type=\"file\" [attr.disabled]=\"schema.readOnly?true:null\"\n    (change)=\"onFileChange($event)\">\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>`\n})\nexport class FileWidget extends ControlWidget implements AfterViewInit {\n\n  protected reader = new FileReader();\n  protected filedata: any = {};\n\n  constructor() {\n    super();\n  }\n\n  ngAfterViewInit() {\n    // OVERRIDE ControlWidget ngAfterViewInit() as ReactiveForms do not handle\n    // file inputs\n    const control = this.control;\n    this.formProperty.errorsChanges.subscribe((errors) => {\n      control.setErrors(errors, { emitEvent: true });\n    });\n\n    this.reader.onloadend = () => {\n      this.filedata.data = window.btoa((this.reader.result as string));\n      this.formProperty.setValue(this.filedata, false);\n    };\n  }\n\n  onFileChange($event) {\n    const file = $event.target.files[0];\n    this.filedata.filename = file.name;\n    this.filedata.size = file.size;\n    this.filedata['content-type'] = file.type;\n    this.filedata.encoding = 'base64';\n    this.reader.readAsBinaryString(file);\n  }\n}\n","import {\n  Component,\n} from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-integer-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n  <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<input [attr.readonly]=\"schema.readOnly?true:null\" [name]=\"name\"\n\tclass=\"text-widget integer-widget form-control\" [formControl]=\"control\"\n\t[attr.type]=\"'number'\" [attr.min]=\"schema.minimum\" [attr.max]=\"schema.maximum\"\n\t[attr.placeholder]=\"schema.placeholder\"\n\t[attr.maxLength]=\"schema.maxLength || null\"\n  [attr.minLength]=\"schema.minLength || null\">\n</div>`\n})\nexport class IntegerWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-textarea-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<textarea [readonly]=\"schema.readOnly\" [name]=\"name\"\n\t\tclass=\"text-widget textarea-widget form-control\"\n\t\t[attr.placeholder]=\"schema.placeholder\"\n\t\t[attr.maxLength]=\"schema.maxLength || null\"\n    [attr.minLength]=\"schema.minLength || null\"\n\t\t[formControl]=\"control\"></textarea>\n</div>`\n})\nexport class TextAreaWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-radio-widget',\n  template: `<div class=\"widget form-group\">\n\t<label>{{schema.title}}</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<div *ngFor=\"let option of schema.oneOf\" class=\"radio\">\n\t\t<label class=\"horizontal control-label\">\n\t\t\t<input [formControl]=\"control\" [attr.name]=\"name\" value=\"{{option.enum[0]}}\" type=\"radio\"  [disabled]=\"schema.readOnly\">\n\t\t\t{{option.description}}\n\t\t</label>\n\t</div>\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>`\n})\nexport class RadioWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-range-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\t\n\t<input [name]=\"name\" class=\"text-widget range-widget\" [attr.id]=\"id\"\n\t[formControl]=\"control\" [attr.type]=\"'range'\" [attr.min]=\"schema.minimum\" [attr.max]=\"schema.maximum\" [disabled]=\"schema.readOnly?true:null\" >\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\">\n</div>`\n})\nexport class RangeWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n\tselector: 'sf-select-widget',\n\ttemplate: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n\n\t<span *ngIf=\"schema.description\" class=\"formHelp\">\n\t\t{{schema.description}}\n\t</span>\n\n\t<select *ngIf=\"schema.type!='array'\" [formControl]=\"control\" [attr.name]=\"name\" [disabled]=\"schema.readOnly\" class=\"form-control\">\n\t\t<option *ngFor=\"let option of schema.oneOf\" [ngValue]=\"option.enum[0]\" >{{option.description}}</option>\n\t</select>\n\n\t<select *ngIf=\"schema.type==='array'\" multiple [formControl]=\"control\" [attr.name]=\"name\" [disabled]=\"schema.readOnly\" class=\"form-control\">\n\t\t<option *ngFor=\"let option of schema.items.oneOf\" [ngValue]=\"option.enum[0]\" >{{option.description}}</option>\n\t</select>\n\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>`\n})\nexport class SelectWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-string-widget',\n  template: `<input *ngIf=\"this.schema.widget.id ==='hidden'; else notHiddenFieldBlock\"\n  [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n<ng-template #notHiddenFieldBlock>\n<div class=\"widget form-group\">\n    <label [attr.for]=\"id\" class=\"horizontal control-label\">\n    \t{{ schema.title }}\n    </label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n    <input [name]=\"name\" [attr.readonly]=\"(schema.widget.id!=='color') && schema.readOnly?true:null\"\n    class=\"text-widget.id textline-widget form-control\"\n    [attr.type]=\"!this.schema.widget.id || this.schema.widget.id === 'string' ? 'text' : this.schema.widget.id\"\n    [attr.id]=\"id\"  [formControl]=\"control\" [attr.placeholder]=\"schema.placeholder\"\n    [attr.maxLength]=\"schema.maxLength || null\"\n    [attr.minLength]=\"schema.minLength || null\"\n    [attr.required]=\"schema.isRequired || null\"\n    [attr.disabled]=\"(schema.widget.id=='color' && schema.readOnly)?true:null\">\n    <input *ngIf=\"(schema.widget.id==='color' && schema.readOnly)\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>\n</ng-template>`\n})\nexport class StringWidget extends ControlWidget {\n\n    getInputType() {\n        if (!this.schema.widget.id || this.schema.widget.id === 'string') {\n            return 'text';\n        } else {\n            return this.schema.widget.id;\n        }\n    }\n}\n","import { ArrayWidget } from './array/array.widget';\nimport { ButtonWidget } from './button/button.widget';\nimport { CheckboxWidget } from './checkbox/checkbox.widget';\nimport { FileWidget } from './file/file.widget';\nimport { IntegerWidget } from './integer/integer.widget';\nimport { ObjectWidget } from './object/object.widget';\nimport { RadioWidget } from './radio/radio.widget';\nimport { RangeWidget } from './range/range.widget';\nimport { SelectWidget } from './select/select.widget';\nimport { StringWidget } from './string/string.widget';\nimport { TextAreaWidget } from './textarea/textarea.widget';\n\nimport { WidgetRegistry } from '../widgetregistry';\n\nexport class DefaultWidgetRegistry extends WidgetRegistry {\n  constructor() {\n    super();\n\n    this.register('array',  ArrayWidget);\n    this.register('object',  ObjectWidget);\n\n    this.register('string', StringWidget);\n    this.register('search', StringWidget);\n    this.register('tel', StringWidget);\n    this.register('url', StringWidget);\n    this.register('email', StringWidget);\n    this.register('password', StringWidget);\n    this.register('color', StringWidget);\n    this.register('date', StringWidget);\n    this.register('date-time', StringWidget);\n    this.register('time', StringWidget);\n\n    this.register('integer', IntegerWidget);\n    this.register('number', IntegerWidget);\n    this.register('range', RangeWidget);\n\n    this.register('textarea', TextAreaWidget);\n\n    this.register('file', FileWidget);\n    this.register('select', SelectWidget);\n    this.register('radio', RadioWidget);\n    this.register('boolean', CheckboxWidget);\n    this.register('checkbox', CheckboxWidget);\n\n    this.register('button', ButtonWidget);\n\n    this.setDefaultWidget(StringWidget);\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'sf-default-field',\n  template: `<p>Unknow type</p>`\n})\nexport class DefaultWidget {}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {\n  FormsModule,\n  ReactiveFormsModule\n} from '@angular/forms';\n\nimport {FormElementComponent} from './formelement.component';\nimport {FormComponent} from './form.component';\nimport {WidgetChooserComponent} from './widgetchooser.component';\nimport {ArrayWidget} from './defaultwidgets/array/array.widget';\nimport {ButtonWidget} from './defaultwidgets/button/button.widget';\nimport {ObjectWidget} from './defaultwidgets/object/object.widget';\nimport {CheckboxWidget} from './defaultwidgets/checkbox/checkbox.widget';\nimport {FileWidget} from './defaultwidgets/file/file.widget';\nimport {IntegerWidget} from './defaultwidgets/integer/integer.widget';\nimport {TextAreaWidget} from './defaultwidgets/textarea/textarea.widget';\nimport {RadioWidget} from './defaultwidgets/radio/radio.widget';\nimport {RangeWidget} from './defaultwidgets/range/range.widget';\nimport {SelectWidget} from './defaultwidgets/select/select.widget';\nimport {StringWidget} from './defaultwidgets/string/string.widget';\nimport {DefaultWidgetRegistry} from './defaultwidgets/defaultwidgetregistry';\nimport {\n  DefaultWidget\n} from './default.widget';\n\nimport {WidgetRegistry} from './widgetregistry';\nimport {SchemaValidatorFactory, ZSchemaValidatorFactory} from './schemavalidatorfactory';\nimport {FormElementComponentAction} from './formelement.action.component';\n\nconst moduleProviders = [\n  {\n    provide: WidgetRegistry,\n    useClass: DefaultWidgetRegistry\n  },\n  {\n    provide: SchemaValidatorFactory,\n    useClass: ZSchemaValidatorFactory\n  }\n];\n\n@NgModule({\n  imports: [CommonModule, FormsModule, ReactiveFormsModule],\n  declarations: [\n    FormElementComponent,\n    FormElementComponentAction,\n    FormComponent,\n    WidgetChooserComponent,\n    DefaultWidget,\n    ArrayWidget,\n    ButtonWidget,\n    ObjectWidget,\n    CheckboxWidget,\n    FileWidget,\n    IntegerWidget,\n    TextAreaWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    StringWidget,\n  ],\n  entryComponents: [\n    FormElementComponent,\n    FormElementComponentAction,\n    FormComponent,\n    WidgetChooserComponent,\n    ArrayWidget,\n    ButtonWidget,\n    ObjectWidget,\n    CheckboxWidget,\n    FileWidget,\n    IntegerWidget,\n    TextAreaWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    StringWidget,\n  ],\n  exports: [\n    FormComponent,\n    FormElementComponent,\n    FormElementComponentAction,\n    WidgetChooserComponent,\n    ArrayWidget,\n    ButtonWidget,\n    ObjectWidget,\n    CheckboxWidget,\n    FileWidget,\n    IntegerWidget,\n    TextAreaWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    StringWidget\n  ]\n})\nexport class SchemaFormModule {\n\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: SchemaFormModule,\n      providers: [...moduleProviders]\n    };\n  }\n\n}\n","import { Injectable, EventEmitter } from '@angular/core';\n\nexport class TemplateSchemaService {\n\n  changes = new EventEmitter();\n\n  constructor() { }\n\n  changed() {\n    this.changes.emit();\n  }\n\n}\n","import { ElementRef } from '@angular/core';\n\nexport class TemplateSchemaElement {\n\n  getTextContent(elementRef: ElementRef): string {\n    const nodes = Array.from(elementRef.nativeElement.childNodes);\n    const node = <HTMLElement>nodes.filter((el: HTMLElement) => {\n      return el.nodeType === el.TEXT_NODE;\n    }).pop();\n\n    if (!node || !node.nodeValue) {\n      return '';\n    }\n\n    return node.nodeValue.trim();\n  }\n\n}\n","import {\n  Component,\n  AfterContentInit,\n  Input,\n  Output,\n  ElementRef,\n  EventEmitter,\n  forwardRef\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { TemplateSchemaElement } from '../template-schema-element';\n\n\n@Component({\n  selector: 'sf-button',\n  templateUrl: './button.component.html',\n  providers: [\n    {\n      provide: TemplateSchemaElement,\n      useExisting: forwardRef(() => ButtonComponent),\n    }\n  ]\n})\nexport class ButtonComponent extends TemplateSchemaElement implements AfterContentInit {\n\n  @Input()\n  id: string;\n\n  @Input()\n  label = '';\n\n  @Input()\n  widget: string | object;\n\n  @Output()\n  click = new EventEmitter<any>();\n\n  constructor(private elementRef: ElementRef) {\n    super();\n  }\n\n  private setLabelFromContent() {\n    const textContent = this.getTextContent(this.elementRef);\n\n    // label as @Input takes priority over content text\n    if (textContent && !this.label) {\n      this.label = textContent;\n    }\n\n  }\n\n  ngAfterContentInit() {\n    this.setLabelFromContent();\n  }\n\n}\n","import { Validator } from '../../model/validator';\n\nexport enum FieldType {\n  String = 'string',\n  Object = 'object',\n  Array = 'array',\n  Boolean = 'boolean',\n  Integer =  'integer',\n  Number = 'number',\n}\n\nexport interface Field {\n  name: string;\n  required: boolean;\n  getSchema(): any;\n  getButtons(): any;\n  getValidators(): { path: string, validator: Validator }[];\n}\n\n\n","import { ElementRef, QueryList } from '@angular/core';\n\nimport { Validator } from '../../model/validator';\nimport { ActionRegistry } from '../../model/actionregistry';\nimport { ButtonComponent } from '../button/button.component';\nimport { TemplateSchemaElement } from '../template-schema-element';\n\nimport { Field, FieldType } from './field';\n\nexport abstract class FieldParent extends TemplateSchemaElement {\n\n  name = '';\n  type: FieldType;\n\n  get path(): string {\n    if (!this.name) {\n      return '';\n    }\n\n    return '/' + this.name;\n  }\n\n  protected abstract actionRegistry: ActionRegistry;\n  protected abstract childButtons: QueryList<ButtonComponent>;\n\n\n  getButtons(): { id: string, label: string, widget?: string | object }[] {\n\n    return this.childButtons.map((button, index) => {\n\n      if (!button.id) {\n        const randomString = Math.random().toString(16).substr(2, 8);\n        // generate id for button\n        button.id = this.name + randomString + '_'  + (index + 1);\n      }\n\n      // register as button action the EventEmitter click\n      this.actionRegistry.register(\n        button.id,\n        button.click.emit.bind(button.click)\n      );\n\n      const _button = <any>{\n        id: button.id,\n        label: button.label,\n      };\n\n      if (button.widget) {\n        _button.widget = button.widget;\n      }\n\n      return _button;\n\n    });\n  }\n\n  protected getFieldsValidators(\n    fields: Field[]\n  ): { path: string, validator: Validator }[] {\n\n    return fields.reduce((validators, field) => {\n      return validators.concat(field.getValidators());\n    }, []);\n\n  }\n\n  protected getFieldsSchema(fields: Field[]) {\n    return fields.reduce((schema: any, field) => {\n\n      switch (this.type) {\n        case FieldType.Array:\n          schema.items = field.getSchema();\n          break;\n\n        default:\n          if (!schema.properties) {\n            schema.properties = {};\n          }\n\n          schema.properties[field.name] = field.getSchema();\n          break;\n      }\n\n      const buttons = field.getButtons();\n      if (buttons.length > 0) {\n        schema.buttons = buttons;\n      }\n\n      if (!field.required) {\n        return schema;\n      }\n\n      if (!schema.required) {\n        schema.required = [];\n      }\n      schema.required.push(field.name);\n      return schema;\n    }, {});\n  }\n\n}\n","import {\n Component,\n ElementRef,\n Input,\n OnInit,\n forwardRef\n} from '@angular/core';\n\nimport { TemplateSchemaElement } from '../../template-schema-element';\n\n\n@Component({\n  selector: 'sf-item',\n  templateUrl: './item.component.html'\n})\nexport class ItemComponent extends TemplateSchemaElement implements OnInit {\n\n  @Input()\n  value: any;\n\n  description: string;\n\n  constructor(private elementRef: ElementRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this.description = this.getTextContent(this.elementRef);\n  }\n\n}\n","import {\n  Component,\n  Input,\n  Output,\n  OnInit,\n  AfterContentInit,\n  ContentChildren,\n  ViewChild,\n  QueryList,\n  ElementRef,\n  forwardRef,\n  SimpleChanges,\n  SimpleChange,\n  OnChanges\n} from '@angular/core';\nimport { Observable, merge } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Action } from '../../model/action';\nimport { ActionRegistry } from '../../model/actionregistry';\nimport { Validator } from '../../model/validator';\n\nimport { TemplateSchemaElement } from '../template-schema-element';\nimport { TemplateSchemaService } from '../template-schema.service';\nimport { ButtonComponent } from '../button/button.component';\n\nimport { FieldParent } from './field-parent';\nimport { FieldType, Field } from './field';\nimport { ItemComponent } from './item/item.component';\n\n\n@Component({\n  selector: 'sf-field',\n  templateUrl: './field.component.html'\n})\nexport class FieldComponent extends FieldParent implements\nField, OnChanges, AfterContentInit {\n\n  @ContentChildren(FieldComponent)\n  childFields: QueryList<FieldComponent>;\n\n  @ContentChildren(ItemComponent)\n  childItems: QueryList<ItemComponent>;\n\n  @ContentChildren(ButtonComponent)\n  childButtons: QueryList<ButtonComponent>;\n\n  @Input()\n  name: string;\n\n  @Input()\n  type = FieldType.String;\n\n  @Input()\n  format: string;\n\n  @Input()\n  required: boolean;\n\n  @Input()\n  readOnly: boolean;\n\n  @Input()\n  title: string;\n\n  @Input()\n  description: string;\n\n  @Input()\n  placeholder: string;\n\n  @Input()\n  widget: string | object;\n\n  @Input()\n  validator: Validator;\n\n  @Input()\n  schema: any = { };\n\n  constructor(\n    private elementRef: ElementRef,\n    private templateSchemaService: TemplateSchemaService,\n    protected actionRegistry: ActionRegistry\n  ) {\n    super();\n  }\n\n  getSchema(): any {\n\n    const { properties, items, required } = this.getFieldsSchema(\n      this.childFields.filter(field => field !== this)\n    );\n\n    const oneOf = this.getOneOf();\n\n    const schema = <any>{\n      type: this.type\n    };\n\n    if (this.title !== undefined) {\n      schema.title = this.title;\n    }\n\n    if (properties !== undefined) {\n      schema.properties = properties;\n    }\n\n    if (items !== undefined) {\n      schema.items = items;\n    }\n\n    // requried child fields\n    if (required !== undefined) {\n      schema.required = required;\n    }\n\n    if (oneOf !== undefined) {\n      schema.oneOf = oneOf;\n    }\n\n    if (this.description !== undefined) {\n      schema.description = this.description;\n    }\n\n    if (this.placeholder !== undefined) {\n      schema.placeholder = this.placeholder;\n    }\n\n    if (this.format !== undefined) {\n      schema.format = this.format;\n    }\n\n    if (this.widget !== undefined) {\n      schema.widget = this.widget;\n    }\n\n    if (this.readOnly !== undefined) {\n      schema.readOnly = this.readOnly;\n    }\n\n    const buttons = this.getButtons();\n    if (buttons.length > 0) {\n      schema.buttons = buttons;\n    }\n\n    // @Input schema takes precedence\n    return Object.assign(schema, this.schema);\n\n  }\n\n  getValidators(): { path: string, validator: Validator }[] {\n\n    // registering validator here is not possible since prop full path is needed\n    const childValidators = this.getFieldsValidators(\n      this.childFields.filter(field => field !== this)\n    );\n    const validators = childValidators.map(({ path, validator }) => {\n      return {\n        path: this.path + path,\n        validator\n      };\n    });\n\n    if (!this.validator) {\n      return validators;\n    }\n\n    validators.push({ path: this.path, validator: this.validator });\n    return validators;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n\n    const keys = Object.keys(changes);\n    if (keys.length > 0) {\n      for (const key of keys) {\n        if (!changes[key].isFirstChange()) {\n          // on any input change, force schema change generation\n          this.templateSchemaService.changed();\n          break;\n        }\n      }\n    }\n\n  }\n\n\n  private getOneOf() {\n\n    if (this.childItems.length === 0) {\n      return;\n    }\n\n    const items = this.childItems.map(({ value, description }) => {\n      if (!Array.isArray(value)) {\n        return { enum: [value], description };\n      }\n\n      return { enum: value, description };\n    });\n\n    if (items.length === 0) {\n      return;\n    }\n\n    return items;\n  }\n\n\n  private setTitleFromContent() {\n    const textContent = this.getTextContent(this.elementRef);\n\n    //  title as @Input takes priority over content text\n    if (textContent && !this.title) {\n      this.title = textContent;\n    }\n  }\n\n  ngAfterContentInit() {\n\n    // cache it\n    this.setTitleFromContent();\n\n    merge(\n      this.childFields.changes,\n      this.childItems.changes,\n      this.childButtons.changes\n    )\n    .subscribe(() => this.templateSchemaService.changed());\n  }\n\n}\n","import {\n  Directive,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  HostBinding,\n  SimpleChange,\n  SimpleChanges\n} from '@angular/core';\nimport { merge } from 'rxjs';\n\nimport { FormComponent } from '../form.component';\nimport { ActionRegistry } from '../model/actionregistry';\nimport { ValidatorRegistry } from '../model/validatorregistry';\nimport { TerminatorService } from '../terminator.service';\n\nimport { TemplateSchemaService } from './template-schema.service';\nimport { FieldComponent } from './field/field.component';\nimport { FieldType, Field } from './field/field';\nimport { ButtonComponent } from './button/button.component';\nimport { FieldParent } from './field/field-parent';\n\n\n@Directive({\n  selector: 'sf-form[templateSchema]',\n  providers: [\n    TemplateSchemaService\n  ]\n})\nexport class TemplateSchemaDirective extends FieldParent implements AfterContentInit {\n\n  @ContentChildren(FieldComponent)\n  childFields: QueryList<FieldComponent>;\n\n  @ContentChildren(ButtonComponent)\n  childButtons: QueryList<ButtonComponent>;\n\n  constructor(\n    protected actionRegistry: ActionRegistry,\n    protected validatorRegistry: ValidatorRegistry,\n    private formComponent: FormComponent,\n    private terminatorService: TerminatorService,\n    private templateSchemaService: TemplateSchemaService\n  ) {\n    super();\n  }\n\n  setFormDocumentSchema(fields: FieldComponent[]) {\n      this.actionRegistry.clear();\n      this.validatorRegistry.clear();\n\n      const schema = this.getFieldsSchema(fields);\n\n      const validators = this.getFieldsValidators(fields);\n      validators.forEach(({ path, validator }) => {\n        this.validatorRegistry.register(path, validator);\n      });\n\n      const previousSchema = this.formComponent.schema;\n      this.formComponent.schema = {\n        type: FieldType.Object,\n        properties: schema.properties\n      };\n\n      if (schema.required && schema.required.length > 0) {\n        this.formComponent.schema.requred = schema.required;\n      }\n\n      const buttons = this.getButtons();\n      if (buttons.length > 0) {\n        this.formComponent.schema.buttons = buttons;\n      }\n\n      this.formComponent.ngOnChanges({\n        schema: new SimpleChange(\n          previousSchema,\n          this.formComponent.schema,\n          Boolean(previousSchema)\n        )\n      });\n\n  }\n\n\n  ngAfterContentInit() {\n\n    if (this.childFields.length > 0) {\n      this.setFormDocumentSchema(this.childFields.toArray());\n    }\n\n    merge(\n      this.childFields.changes,\n      this.templateSchemaService.changes\n    )\n   .subscribe(() => {\n      this.terminatorService.destroy();\n      this.setFormDocumentSchema(this.childFields.toArray());\n    });\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FieldComponent } from './field/field.component';\nimport { TemplateSchemaDirective } from './template-schema.directive';\nimport { ButtonComponent } from './button/button.component';\nimport { ItemComponent } from './field/item/item.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    TemplateSchemaDirective,\n    FieldComponent,\n    ButtonComponent,\n    ItemComponent\n  ],\n  exports: [\n    TemplateSchemaDirective,\n    FieldComponent,\n    ButtonComponent,\n    ItemComponent\n  ]\n})\nexport class TemplateSchemaModule { }\n"]}