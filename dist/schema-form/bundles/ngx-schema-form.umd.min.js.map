{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-schema-form/lib/model/actionregistry.ts","ng://ngx-schema-form/lib/model/formproperty.ts","ng://ngx-schema-form/lib/model/typemapping.ts","ng://ngx-schema-form/lib/model/formpropertyfactory.ts","ng://ngx-schema-form/lib/model/schemapreprocessor.ts","ng://ngx-schema-form/lib/property-binding-registry.ts","ng://ngx-schema-form/lib/model/utils.ts","ng://ngx-schema-form/lib/model/validatorregistry.ts","ng://ngx-schema-form/lib/model/bindingregistry.ts","ng://ngx-schema-form/lib/schemavalidatorfactory.ts","ng://ngx-schema-form/lib/widgetregistry.ts","ng://ngx-schema-form/lib/widgetfactory.ts","ng://ngx-schema-form/lib/terminator.service.ts","ng://ngx-schema-form/lib/expression-compiler-factory.ts","ng://ngx-schema-form/lib/form.component.ts","ng://ngx-schema-form/lib/formelement.component.ts","ng://ngx-schema-form/lib/formelement.action.component.ts","ng://ngx-schema-form/lib/widgetchooser.component.ts","ng://ngx-schema-form/lib/model/atomicproperty.ts","ng://ngx-schema-form/lib/model/objectproperty.ts","ng://ngx-schema-form/lib/model/arrayproperty.ts","ng://ngx-schema-form/lib/model/stringproperty.ts","ng://ngx-schema-form/lib/model/booleanproperty.ts","ng://ngx-schema-form/lib/model/numberproperty.ts","ng://ngx-schema-form/lib/template-schema/field/field.ts","ng://ngx-schema-form/lib/widget.ts","ng://ngx-schema-form/lib/defaultwidgets/array/array.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/button/button.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/object/object.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/checkbox/checkbox.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/file/file.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/integer/integer.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/textarea/textarea.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/radio/radio.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/range/range.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/select/select.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/string/string.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/defaultwidgetregistry.ts","ng://ngx-schema-form/lib/defaultwidgets/_directives/disableControl.directive.ts","ng://ngx-schema-form/lib/default.widget.ts","ng://ngx-schema-form/lib/schema-form.module.ts","ng://ngx-schema-form/lib/template-schema/template-schema.service.ts","ng://ngx-schema-form/lib/template-schema/template-schema-element.ts","ng://ngx-schema-form/lib/template-schema/button/button.component.ts","ng://ngx-schema-form/lib/template-schema/field/field-parent.ts","ng://ngx-schema-form/lib/template-schema/field/item/item.component.ts","ng://ngx-schema-form/lib/template-schema/field/field.component.ts","ng://ngx-schema-form/lib/template-schema/template-schema.directive.ts","ng://ngx-schema-form/lib/template-schema/template-schema.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","s","Symbol","iterator","m","call","next","value","done","TypeError","__read","n","e","ar","push","error","__spread","concat","ActionRegistry","actions","clear","register","actionId","action","get","Injectable","FormProperty","schemaValidatorFactory","validatorRegistry","expressionCompilerFactory","schema","parent","path","_value","_errors","_valueChanges","BehaviorSubject","_errorsChanges","_visible","_visibilityChanges","schemaValidator","createValidatorFn","expressionCompilerVisibiltyIf","createExpressionCompilerVisibilityIf","_parent","_root","root","PropertyGroup","_rootName","createRootName","_path","__canonicalPath","canonicalPath","__canonicalPathNotation","replace","RegExp","type","updateValueAndValidity","onlySelf","emitEvent","_updateValue","valueChanges","_runValidation","errors","customValidator","customErrors","findRoot","mergeErrors","setErrors","newErrors","isArray","apply","extendErrors","searchProperty","prop","base","result","getProperty","substr","property","setVisible","visible","__evaluateVisibilityIf","sourceProperty","targetProperty","dependencyPath","expression","valid","isNaN","indexOf","toString","expArray","expArray_1","expArray_1_1","_expresssion","substring","evaluate","source","console","_canonicalPath","__bindVisibility","_this","visibleIfProperty","visibleIf","visibleIfOf","oneOf","allOf","keys","this_1","undefined","propertiesBinding","properties","findProperties","valueCheck","pipe","map","_c","e_4","_d","item","_e","e_5","_f","depPath","propVal","visibilityCheck","and","combineLatest","v1","v2","properties_1","e_3","properties_1_1","warn","registerMissingVisibilityBinding","values","_i","distinctUntilChanged","subscribe","visibleIfOf_1","visibleIfOf_1_1","_bindVisibility","this_2","properties_2","e_6","properties_2_1","formProperty","_propertyBindingRegistry","getPropertyBindingsVisibility","add","propertyPath","props","paths","findPropertyPaths","paths_1","paths_1_1","parentPath","ix","prePath","subPath","pathFound","arrProp","curreItemPath","endsWith","curreItemPrePath","childrenPathFound","_super","_properties","_propertyProxyHandler","set","receiver","_a","propertyValue","indexOfChild","pos","lastIndexOf","getCanonicalPath","propertyGroup","propertyGroupChildren","propertyGroupChildren_1","propertyGroupChildren_1_1","child","children","assertCanonicalPath","rebindAll","findPropertiesToRebind","propertyBindings","rebind","findByDependencyPath","startsWith","uniqueValues","rebind_1","rebind_1_1","rebindAll_1","rebindAll_1_1","_property","rebindPaths","rebindPaths_1","e_10","rebindPaths_1_1","rebindPropPath","rebindVisibility","deleteProperty","Proxy","subPathIdx","propertyId","forEachChild","fn","forEachChildRecursive","_bindVisibilityRecursive","isRoot","PROPERTY_TYPE_MAPPING","FormPropertyFactory","propertyBindingRegistry","createProperty","newProperty","$ref","refSchema","getSchema","initializeRoot","rootProperty","reset","formatMessage","message","schemaError","mesg","Error","schemaWarning","PropertyBindingTypes","SchemaPreprocessor","preprocess","jsonSchema","SchemaPreprocessor_1","normalizeExtensions","checkProperties","checkAndCreateFieldsets","checkItems","normalizeWidget","recursiveCheck","fieldsets","order","replaceOrderByFieldsets","createFieldsets","checkFieldsUsage","fieldsId","usedFields","fieldset","e_2","fields","_g","fieldId","id","fieldsId_1","fieldsId_1_1","isRequired","required","remainingfieldsId","title","description","name","fieldSchema","widget","items","definitions","removeRecursiveRefProperties","definitionPath","extensions","regex","k","find","match","v","copy","JSON","parse","stringify","ValidatorRegistry","validators","validator","BindingRegistry","bindings","binding","SchemaValidatorFactory","ZSchemaValidatorFactory","createSchemaValidator","zschema","ZSchema","breakOnFirstError","validate","err","getLastErrors","denormalizeRequiredPropertyPaths","ref","compileSchema","getDefinition","getLastError","code","params","foundSchema","split","slice","forEach","ptr","WidgetRegistry","widgets","setDefaultWidget","defaultWidget","getDefaultWidget","hasWidget","getWidgetType","WidgetFactory","registry","resolver","createWidget","container","componentClass","componentFactory","resolveComponentFactory","createComponent","ComponentFactoryResolver","TerminatorService","onDestroy","Subject","destroy","PropertyBindingRegistry","getPropertyBindings","PropertyBindings","visibility","sourcesIndex","SimplePropertyIndexer","dependenciesIndex","sourcePropertyPath","store","results","_b","res","found","getBySourcePropertyPath","createPathIndex","index","findOnlyWithValue","_createPathIndex","filter","_storeIndex","pathIndex","indexPos","pathIndex_1","pathIndex_1_1","MARKER","_findInIndex","ixRes","__findIndex","indexerResults","segment","wild","_keys","keys_1","keys_1_1","restPath","restIndex","restParent","restPaths","JEXLExpressionCompilerFactory","createExpressionCompiler","JEXLExpressionCompiler","JEXLExpressionCompilerVisibiltyIf","ExpressionCompilerFactory","context","JEXL.Jexl","evalSync","useFactory","FormComponent","formPropertyFactory","actionRegistry","bindingRegistry","cdr","terminator","onChange","EventEmitter","modelChange","isValid","onErrorChange","onErrorsChange","writeValue","obj","registerOnChange","onChangeCallback","onValueChanges","bind","registerOnTouched","ngOnChanges","changes","setValidators","setActions","setBindings","firstChange","model","errorsChanges","emit","detectChanges","validatorId","bindingPath","setModel","assign","observers","ChangeDetectorRef","Input","Output","FormComponent_1","Component","selector","template","providers","provide","deps","NG_VALUE_ACCESSOR","useExisting","multi","FormElementComponent","renderer","elementRef","control","FormControl","buttons","unlisten","ngOnInit","parseButtons","setupBindings","eventId","createBinding","listener","listen","nativeElement","event","Function","button","createButtonCallback","parameters","preventDefault","onWidgetInstanciated","canonicalPathNotation","FormElementComponent_1","counter","rootName","ngOnDestroy","Renderer2","ElementRef","FormElementComponentAction","widgetFactory","subs","instance","unsubscribe","ViewChild","read","ViewContainerRef","static","WidgetChooserComponent","widgetInstanciated","widgetInfo","widgetInstance","AtomicProperty","setValue","resetValue","default","fallbackValue","_hasValue","ObjectProperty","propertiesId","createProperties","resetProperties","propertySchema","reduceValue","object","ArrayProperty","addItem","addProperty","removeItem","_","idx","array","StringProperty","string","BooleanProperty","boolean","NumberProperty","parseFloat","parseInt","integer","number","FieldType","ControlWidget","ngAfterViewInit","newValue","messages","errorMessages","Widget","ArrayLayoutWidget","ObjectLayoutWidget","ArrayWidget","updateButtonDisabledState","trackByIndex","buttonDisabledAdd","isAddButtonDisabled","buttonDisabledRemove","isRemoveButtonDisabled","maxItems","minItems","ButtonWidget","ObjectWidget","CheckboxWidget","checked","onCheck","el","FileWidget","reader","FileReader","filedata","onloadend","data","window","btoa","onFileChange","$event","file","files","filename","size","encoding","readAsBinaryString","IntegerWidget","TextAreaWidget","RadioWidget","RangeWidget","SelectWidget","StringWidget","getInputType","DefaultWidgetRegistry","DisableControlDirective","ngControl","condition","NgControl","Directive","DefaultWidget","moduleProviders","useClass","SchemaFormModule","forRoot","ngModule","SchemaFormModule_1","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","declarations","entryComponents","exports","TemplateSchemaService","changed","TemplateSchemaElement","getTextContent","node","from","childNodes","nodeType","TEXT_NODE","pop","nodeValue","trim","ButtonComponent","label","click","setLabelFromContent","textContent","ngAfterContentInit","ButtonComponent_1","forwardRef","FieldParent","getButtons","childButtons","randomString","Math","random","_button","getFieldsValidators","reduce","field","getValidators","getFieldsSchema","ItemComponent","FieldComponent","templateSchemaService","String","childFields","getOneOf","placeholder","format","readOnly","isFirstChange","childItems","enum","setTitleFromContent","merge","ContentChildren","FieldComponent_1","QueryList","TemplateSchemaDirective","formComponent","terminatorService","setFormDocumentSchema","previousSchema","requred","SimpleChange","Boolean","toArray","TemplateSchemaModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Action } from './action';\nimport { Injectable } from \"@angular/core\";\n\n@Injectable()\nexport class ActionRegistry {\n  actions: {[key: string]: Action} = {};\n\n  clear() {\n    this.actions = {};\n  }\n\n  register(actionId: string, action: Action) {\n    this.actions[actionId] = action;\n  }\n\n  get(actionId: string) {\n    return this.actions[actionId];\n  }\n}\n","import {BehaviorSubject, combineLatest} from 'rxjs';\nimport {distinctUntilChanged, map} from 'rxjs/operators';\n\nimport {SchemaValidatorFactory} from '../schemavalidatorfactory';\nimport {ValidatorRegistry} from './validatorregistry';\nimport {PropertyBindingRegistry} from '../property-binding-registry';\nimport { ExpressionCompilerFactory, ExpressionCompilerVisibilityIf } from '../expression-compiler-factory';\n\nexport abstract class FormProperty {\n  public schemaValidator: Function;\n  public expressionCompilerVisibiltyIf: ExpressionCompilerVisibilityIf;\n\n  _value: any = null;\n  _errors: any = null;\n  private _valueChanges = new BehaviorSubject<any>(null);\n  private _errorsChanges = new BehaviorSubject<any>(null);\n  private _visible = true;\n  private _visibilityChanges = new BehaviorSubject<boolean>(true);\n  private _root: PropertyGroup;\n  private _parent: PropertyGroup;\n  private _path: string;\n  _propertyBindingRegistry: PropertyBindingRegistry;\n  __canonicalPath: string;\n  __canonicalPathNotation: string;\n\n  /**\n   * Provides the unique path of this form element.<br/>\n   * E.g.:\n   * <code>/garage/cars</code>,<br/>\n   * <code>/shop/book/0/page/1/</code>\n   */\n  get _canonicalPath() { return this.__canonicalPath; }\n  set _canonicalPath(canonicalPath: string) {\n    this.__canonicalPath = canonicalPath;\n    this.__canonicalPathNotation = (this.__canonicalPath||'')\n      .replace(new RegExp('^/', 'ig'), '')\n      .replace(new RegExp('/$', 'ig'), '')\n      .replace(new RegExp('/', 'ig'), '.');\n  }\n  /**\n   * Uses the unique path provided by the property <code>_canonicalPath</code><br/>\n   * but converts it to a HTML Element Attribute ID compliant format.<br/>\n   * E.g.:\n   * <code>garage.cars</code>,<br/>\n   * <code>shop.book.0.page.1.</code>\n   */\n  get canonicalPathNotation() { return this.__canonicalPathNotation; }\n\n  private _rootName;\n  /**\n   * Provides the HTML Element Attribute ID/NAME compliant representation\n   * of the root element.<br/>\n   * Represents the HTML FORM NAME.<br/>\n   * Only the root <code>FormProperty</code> will provide a value here.\n   */\n  get rootName() { return this._rootName; }\n\n  constructor(schemaValidatorFactory: SchemaValidatorFactory,\n              private validatorRegistry: ValidatorRegistry,\n              expressionCompilerFactory: ExpressionCompilerFactory,\n              public schema: any,\n              parent: PropertyGroup,\n              path: string) {\n    this.schemaValidator = schemaValidatorFactory.createValidatorFn(this.schema);\n    this.expressionCompilerVisibiltyIf = expressionCompilerFactory.createExpressionCompilerVisibilityIf();\n\n    this._parent = parent;\n    if (parent) {\n      this._root = parent.root;\n    } else if (this instanceof PropertyGroup) {\n      this._root = <PropertyGroup><any>this;\n      this._rootName = this.createRootName();\n    }\n    this._path = path;\n  }\n\n  /**\n   * Creates the HTML ID and NAME attribute compliant string.\n   */\n  private createRootName(): string {\n    if (this.schema && this.schema['name']) {\n      return this._rootName = this.schema['name'].replace(new RegExp('[\\\\s]+', 'ig'), '_')\n    }\n    return ''\n  }\n\n  public get valueChanges() {\n    return this._valueChanges;\n  }\n\n  public get errorsChanges() {\n    return this._errorsChanges;\n  }\n\n  public get type(): string {\n    return this.schema.type;\n  }\n\n  public get parent(): PropertyGroup {\n    return this._parent;\n  }\n\n  public get root(): PropertyGroup {\n    return this._root || <PropertyGroup><any>this;\n  }\n\n  public get path(): string {\n    return this._path;\n  }\n\n  public get value() {\n    return this._value;\n  }\n\n  public get visible() {\n    return this._visible;\n  }\n\n  public get valid() {\n    return this._errors === null;\n  }\n\n  public abstract setValue(value: any, onlySelf: boolean);\n\n  public abstract reset(value: any, onlySelf: boolean);\n\n  public updateValueAndValidity(onlySelf = false, emitEvent = true) {\n    this._updateValue();\n\n    if (emitEvent) {\n      this.valueChanges.next(this.value);\n    }\n\n    this._runValidation();\n\n    if (this.parent && !onlySelf) {\n      this.parent.updateValueAndValidity(onlySelf, emitEvent);\n    }\n\n  }\n\n  /**\n   * @internal\n   */\n  public abstract _hasValue(): boolean;\n\n  /**\n   *  @internal\n   */\n  public abstract _updateValue();\n\n  /**\n   * @internal\n   */\n  public _runValidation(): any {\n    let errors = this.schemaValidator(this._value) || [];\n    let customValidator = this.validatorRegistry.get(this.path);\n    if (customValidator) {\n      let customErrors = customValidator(this.value, this, this.findRoot());\n      errors = this.mergeErrors(errors, customErrors);\n    }\n    if (errors.length === 0) {\n      errors = null;\n    }\n\n    this._errors = errors;\n    this.setErrors(this._errors);\n  }\n\n  private mergeErrors(errors, newErrors) {\n    if (newErrors) {\n      if (Array.isArray(newErrors)) {\n        errors = errors.concat(...newErrors);\n      } else {\n        errors.push(newErrors);\n      }\n    }\n    return errors;\n  }\n\n  private setErrors(errors) {\n    this._errors = errors;\n    this._errorsChanges.next(errors);\n  }\n\n  public extendErrors(errors) {\n    errors = this.mergeErrors(this._errors || [], errors);\n    this.setErrors(errors);\n  }\n\n  searchProperty(path: string): FormProperty {\n    let prop: FormProperty = this;\n    let base: PropertyGroup = null;\n\n    let result = null;\n    if (path[0] === '/') {\n      base = this.findRoot();\n      result = base.getProperty(path.substr(1));\n    } else {\n      while (result === null && prop.parent !== null) {\n        prop = base = prop.parent;\n        result = base.getProperty(path);\n      }\n    }\n    return result;\n  }\n\n  public findRoot(): PropertyGroup {\n    let property: FormProperty = this;\n    while (property.parent !== null) {\n      property = property.parent;\n    }\n    return <PropertyGroup>property;\n  }\n\n  private setVisible(visible: boolean) {\n    this._visible = visible;\n    this._visibilityChanges.next(visible);\n    this.updateValueAndValidity();\n    if (this.parent) {\n      this.parent.updateValueAndValidity(false, true);\n    }\n  }\n\n  /**\n   * Making use of the expression compiler for the <code>visibleIf</code> condition\n   */\n  private __evaluateVisibilityIf(\n    sourceProperty: FormProperty,\n    targetProperty: FormProperty,\n    dependencyPath: string,\n    value: any = '',\n    expression: string|string[]|number = ''): boolean {\n    try {\n      let valid = false\n      if (isNaN(expression as number) && (expression as string).indexOf('$ANY$') !== -1) {\n        valid = value && value.length > 0;\n      } else if ((expression||[]).toString().indexOf('$EXP$') === 0) {\n        // since visibleIf condition values are an array... we must do this\n        const expArray = Array.isArray(expression) ? expression : (expression ? [expression] : [])\n        for (const expString of expArray) {\n          const _expresssion = (expString as string).substring('$EXP$'.length);\n          valid = true === this.expressionCompilerVisibiltyIf.evaluate(_expresssion, {\n            source: sourceProperty,\n            target: targetProperty\n          })\n          if (valid) {\n            break\n          }\n        }\n      } else {\n        valid = isNaN(value) ? value.indexOf(expression) !== -1 : value === expression;\n      }\n      return valid\n    } catch (error) {\n      console.error('Error processing \"VisibileIf\" expression for path: ', dependencyPath,\n        `source - ${sourceProperty._canonicalPath}: `, sourceProperty,\n        `target - ${targetProperty._canonicalPath}: `, targetProperty,\n        'value:', value,\n        'expression: ', expression,\n        'error: ', error)\n    }\n  }\n\n  private __bindVisibility(): boolean {\n    /**\n     * <pre>\n     *     \"oneOf\":[{\n     *         \"path\":[\"value\",\"value\"]\n     *     },{\n     *         \"path\":[\"value\",\"value\"]\n     *     }]\n     *     </pre>\n     * <pre>\n     *     \"allOf\":[{\n     *         \"path\":[\"value\",\"value\"]\n     *     },{\n     *         \"path\":[\"value\",\"value\"]\n     *     }]\n     *     </pre>\n     */\n    const visibleIfProperty = this.schema.visibleIf;\n    const visibleIfOf = (visibleIfProperty || {}).oneOf || (visibleIfProperty || {}).allOf;\n    if (visibleIfOf) {\n      for (const visibleIf of visibleIfOf) {\n        if (typeof visibleIf === 'object' && Object.keys(visibleIf).length === 0) {\n          this.setVisible(false);\n        } else if (visibleIf !== undefined) {\n          const propertiesBinding = [];\n          for (const dependencyPath in visibleIf) {\n            if (visibleIf.hasOwnProperty(dependencyPath)) {\n              const properties = this.findProperties(this, dependencyPath);\n              if ((properties || []).length) {\n                for (const property of properties) {\n                  if (property) {\n                    let valueCheck;\n                    if (this.schema.visibleIf.oneOf) {\n                      valueCheck = property.valueChanges.pipe(map(\n                        value => this.__evaluateVisibilityIf(this, property, dependencyPath, value, visibleIf[dependencyPath])\n                      ));\n                    } else if (this.schema.visibleIf.allOf) {\n                      const _chk = (value) => {\n                        for (const item of this.schema.visibleIf.allOf) {\n                          for (const depPath of Object.keys(item)) {\n                            const prop = this.searchProperty(depPath);\n                            const propVal = prop.value;\n                            if (!this.__evaluateVisibilityIf(this, prop, dependencyPath, propVal, item[depPath])) {\n                              return false;\n                            }\n                          }\n                        }\n                        return true;\n                      };\n                      valueCheck = property.valueChanges.pipe(map(_chk));\n                    }\n                    const visibilityCheck = property._visibilityChanges;\n                    const and = combineLatest([valueCheck, visibilityCheck], (v1, v2) => v1 && v2);\n                    propertiesBinding.push(and);\n                  }\n                }\n              } else {\n                console.warn('Can\\'t find property ' + dependencyPath + ' for visibility check of ' + this.path);\n                this.registerMissingVisibilityBinding(dependencyPath, this);\n                // not visible if not existent\n                this.setVisible(false);\n              }\n            }\n          }\n\n          combineLatest(propertiesBinding, (...values: boolean[]) => {\n            return values.indexOf(true) !== -1;\n          }).pipe(distinctUntilChanged()).subscribe((visible) => {\n            this.setVisible(visible);\n          });\n        }\n      }\n      return true;\n    }\n  }\n\n  // A field is visible if AT LEAST ONE of the properties it depends on is visible AND has a value in the list\n  public _bindVisibility() {\n    if (this.__bindVisibility())\n      return;\n    let visibleIf = this.schema.visibleIf;\n    if (typeof visibleIf === 'object' && Object.keys(visibleIf).length === 0) {\n      this.setVisible(false);\n    } else if (visibleIf !== undefined) {\n      let propertiesBinding = [];\n      for (let dependencyPath in visibleIf) {\n        if (visibleIf.hasOwnProperty(dependencyPath)) {\n          const properties = this.findProperties(this, dependencyPath);\n          if ((properties || []).length) {\n            for (const property of properties) {\n              if (property) {\n                const valueCheck = property.valueChanges.pipe(map(\n                  value => this.__evaluateVisibilityIf(this, property, dependencyPath, value, visibleIf[dependencyPath])\n                ));\n                const visibilityCheck = property._visibilityChanges;\n                const and = combineLatest([valueCheck, visibilityCheck], (v1, v2) => v1 && v2);\n                propertiesBinding.push(and);\n              }\n            }\n          } else {\n            console.warn('Can\\'t find property ' + dependencyPath + ' for visibility check of ' + this.path);\n            this.registerMissingVisibilityBinding(dependencyPath, this);\n            // not visible if not existent\n            this.setVisible(false);\n          }\n        }\n      }\n\n      combineLatest(propertiesBinding, (...values: boolean[]) => {\n        return values.indexOf(true) !== -1;\n      }).pipe(distinctUntilChanged()).subscribe((visible) => {\n        this.setVisible(visible);\n      });\n    }\n  }\n\n  private registerMissingVisibilityBinding(dependencyPath: string, formProperty: FormProperty) {\n    formProperty._propertyBindingRegistry.getPropertyBindingsVisibility().add(dependencyPath, formProperty.path);\n  }\n\n\n  /**\n   * Finds all <code>formProperties</code> from a path with wildcards.<br/>\n   * e.g: <code>/garage/cars/&#42;/tires/&#42;/name</code><br/>\n   * @param target\n   * @param propertyPath\n   */\n  findProperties(target: FormProperty, propertyPath: string): FormProperty[] {\n    const props: FormProperty[] = [];\n    const paths = this.findPropertyPaths(target, propertyPath);\n    for (const path of paths) {\n      const p: FormProperty = target.searchProperty(path);\n      if (p) {\n        props.push(p);\n      }\n    }\n    return props;\n  }\n\n  /**\n   * Creates canonical paths from a path with wildcards.\n   * e.g:<br/>\n   * From:<br/>\n   * <code>/garage/cars/&#42;/tires/&#42;/name</code><br/>\n   * it creates:<br/>\n   * <code>/garage/cars/0/tires/0/name</code><br/>\n   * <code>/garage/cars/0/tires/1/name</code><br/>\n   * <code>/garage/cars/0/tires/2/name</code><br/>\n   * <code>/garage/cars/0/tires/3/name</code><br/>\n   * <code>/garage/cars/1/tires/0/name</code><br/>\n   * <code>/garage/cars/2/tires/1/name</code><br/>\n   * <code>/garage/cars/3/tires/2/name</code><br/>\n   * <code>/garage/cars/3/tires/3/name</code><br/>\n   * <code>/garage/cars/&#42;/tires/&#42;/name</code><br/>\n   * <code>/garage/cars/&#42;/tires/2/name</code><br/>\n   * <code>/garage/cars/&#42;/tires/3/name</code><br/>\n   * <br/>etc...\n   * @param target\n   * @param path\n   * @param parentPath\n   */\n  findPropertyPaths(target: FormProperty, path: string, parentPath?: string): string[] {\n    const ix = path.indexOf('*');\n    if (-1 !== ix) {\n      const prePath = ix > -1 ? path.substring(0, ix - 1) : path;\n      const subPath = ix > -1 ? path.substring(ix + 1) : path;\n      const prop: FormProperty = target.searchProperty(prePath);\n      let pathFound = [];\n      if (prop instanceof PropertyGroup) {\n        const arrProp = prop.properties as FormProperty[];\n        for (let i = 0; i < arrProp.length; i++) {\n          const curreItemPath = (parentPath || '') + prePath + (prePath.endsWith('/') ? '' : '/') + i + subPath;\n          const curreItemPrePath = (parentPath || '') + prePath + i;\n          if (-1 === curreItemPath.indexOf('*')) {\n            pathFound.push(curreItemPath);\n          }\n          const childrenPathFound = this.findPropertyPaths(arrProp[i], subPath, curreItemPrePath);\n          pathFound = pathFound.concat(childrenPathFound);\n        }\n      }\n      return pathFound;\n    }\n    return [path];\n  }\n}\n\nexport abstract class PropertyGroup extends FormProperty {\n\n  _properties: FormProperty[] | { [key: string]: FormProperty } = null;\n\n  get properties() {\n    return this._properties;\n  }\n\n  set properties(properties: FormProperty[] | { [key: string]: FormProperty }) {\n    /**\n     * Override the setter to add an observer that notices when an item is added or removed.<br/>\n     */\n    this._properties = new Proxy(properties, this._propertyProxyHandler);\n  }\n\n  private _propertyProxyHandler: ProxyHandler<FormProperty[] | { [key: string]: FormProperty }> = {\n    /**\n     * When a new item is added it will be checked for visibility updates to proceed <br/>\n     * if any other field has a binding reference to it.<br/>\n     */\n    set(target: FormProperty[] | { [p: string]: FormProperty }, p: PropertyKey, value: any, receiver: any): boolean {\n\n      /**\n       * 1) Make sure a canonical path is set\n       */\n      const assertCanonicalPath = (propertyValue: any) => {\n        const formProperty = propertyValue as FormProperty;\n        if (Array.isArray(target) && propertyValue instanceof FormProperty) {\n          /**\n           * Create a canonical path replacing the last '*' with the elements position in array\n           * @param propertyPath\n           * @param indexOfChild\n           */\n          const getCanonicalPath = (propertyPath: string, indexOfChild: number) => {\n            let pos;\n            if (propertyPath && -1 !== (pos = propertyPath.lastIndexOf('*'))) {\n              return propertyPath.substring(0, pos) + indexOfChild.toString() + propertyPath.substring(pos + 1);\n            }\n          };\n          if (formProperty) {\n            formProperty._canonicalPath = getCanonicalPath(formProperty._canonicalPath, p as number);\n          }\n        }\n\n        const propertyGroup = formProperty as PropertyGroup;\n        const propertyGroupChildren = (Array.isArray(propertyGroup.properties) ?\n          propertyGroup.properties :\n          Object.values(propertyGroup.properties || {})) as FormProperty[];\n        if ((formProperty.path || '').endsWith('/*')) {\n          /**\n           * If it is an array, then all children canonical paths must be computed now.\n           * The children don't have the parent's path segment set yet,\n           * because they are created before the parent gets attached to its parent.\n           */\n          for (const child of propertyGroupChildren) {\n            child._canonicalPath = formProperty._canonicalPath + child._canonicalPath.substring(formProperty.path.length);\n          }\n        }\n        return {property: formProperty, children: propertyGroupChildren};\n      };\n      const {property, children} = assertCanonicalPath(value);\n\n      /**\n       * 2) Add the new property before rebinding, so it can be found by <code>_bindVisibility</code>\n       */\n      const result = target[p as string] = value;\n\n      /**\n       * 3) Re-bind the visibility bindings referencing to this canonical paths\n       */\n      const rebindVisibility = () => {\n        const rebindAll = [property].concat(children);\n        const findPropertiesToRebind = (formProperty: FormProperty) => {\n          const propertyBindings = formProperty._propertyBindingRegistry.getPropertyBindingsVisibility();\n          let rebind: string[] = [];\n          if (formProperty._canonicalPath) {\n            rebind = rebind.concat(rebind.concat(propertyBindings.findByDependencyPath(formProperty._canonicalPath) || []));\n            if (formProperty._canonicalPath.startsWith('/')) {\n              rebind = rebind.concat(rebind.concat(propertyBindings.findByDependencyPath(formProperty._canonicalPath.substring(1)) || []));\n            }\n          }\n          rebind = rebind.concat(propertyBindings.findByDependencyPath(formProperty.path) || []);\n          if (formProperty.path.startsWith('/')) {\n            rebind = rebind.concat(rebind.concat(propertyBindings.findByDependencyPath(formProperty.path.substring(1)) || []));\n          }\n          const uniqueValues = {};\n          for (const item of rebind) {\n            uniqueValues[item] = item;\n          }\n          return Object.keys(uniqueValues);\n        };\n        for (const _property of rebindAll) {\n          if (_property instanceof FormProperty) {\n            try {\n              const rebindPaths = findPropertiesToRebind(_property);\n              for (const rebindPropPath of rebindPaths) {\n                const rebindProp = _property.searchProperty(rebindPropPath);\n                rebindProp._bindVisibility();\n              }\n            } catch (e) {\n              console.error('Rebinding visibility error at path:', _property.path, 'property:', _property, e);\n            }\n          }\n        }\n      };\n      rebindVisibility();\n\n      return result;\n    },\n    get(target: FormProperty[] | { [p: string]: FormProperty }, p: PropertyKey, receiver: any): any {\n      return target[p as string];\n    },\n    deleteProperty(target: FormProperty[] | { [p: string]: FormProperty }, p: PropertyKey): boolean {\n      return delete target[p as string];\n    }\n  };\n\n  getProperty(path: string) {\n    let subPathIdx = path.indexOf('/');\n    let propertyId = subPathIdx !== -1 ? path.substr(0, subPathIdx) : path;\n\n    let property = this.properties[propertyId];\n    if (property !== null && subPathIdx !== -1 && property instanceof PropertyGroup) {\n      let subPath = path.substr(subPathIdx + 1);\n      property = (<PropertyGroup>property).getProperty(subPath);\n    }\n    return property;\n  }\n\n  public forEachChild(fn: (formProperty: FormProperty, str: String) => void) {\n    for (let propertyId in this.properties) {\n      if (this.properties.hasOwnProperty(propertyId)) {\n        let property = this.properties[propertyId];\n        fn(property, propertyId);\n      }\n    }\n  }\n\n  public forEachChildRecursive(fn: (formProperty: FormProperty) => void) {\n    this.forEachChild((child) => {\n      fn(child);\n      if (child instanceof PropertyGroup) {\n        (<PropertyGroup>child).forEachChildRecursive(fn);\n      }\n    });\n  }\n\n  public _bindVisibility() {\n    super._bindVisibility();\n    this._bindVisibilityRecursive();\n  }\n\n  private _bindVisibilityRecursive() {\n    this.forEachChildRecursive((property) => {\n      property._bindVisibility();\n    });\n  }\n\n  public isRoot() {\n    return this === this.root;\n  }\n}\n\n\n","export const PROPERTY_TYPE_MAPPING: { [type: string]: any } = {};\n","import {FormProperty, PropertyGroup} from './formproperty';\nimport {SchemaValidatorFactory} from '../schemavalidatorfactory';\nimport {ValidatorRegistry} from './validatorregistry';\nimport {PropertyBindingRegistry} from '../property-binding-registry';\nimport { ExpressionCompilerFactory } from '../expression-compiler-factory';\nimport { PROPERTY_TYPE_MAPPING } from './typemapping';\n\nexport class FormPropertyFactory {\n\n  constructor(private schemaValidatorFactory: SchemaValidatorFactory, private validatorRegistry: ValidatorRegistry,\n              private propertyBindingRegistry: PropertyBindingRegistry,\n              private expressionCompilerFactory: ExpressionCompilerFactory) {\n  }\n\n  createProperty(schema: any, parent: PropertyGroup = null, propertyId?: string): FormProperty {\n    let newProperty = null;\n    let path = '';\n    let _canonicalPath = '';\n    if (parent) {\n      path += parent.path;\n      if (parent.parent !== null) {\n        path += '/';\n        _canonicalPath += '/';\n      }\n      if (parent.type === 'object') {\n        path += propertyId;\n        _canonicalPath += propertyId;\n      } else if (parent.type === 'array') {\n        path += '*';\n        _canonicalPath += '*';\n      } else {\n        throw 'Instanciation of a FormProperty with an unknown parent type: ' + parent.type;\n      }\n      _canonicalPath = (parent._canonicalPath || parent.path) + _canonicalPath;\n    } else {\n      path = '/';\n      _canonicalPath = '/';\n    }\n\n    if (schema.$ref) {\n      const refSchema = this.schemaValidatorFactory.getSchema(parent.root.schema, schema.$ref);\n      newProperty = this.createProperty(refSchema, parent, path);\n    } else {\n        if (PROPERTY_TYPE_MAPPING[schema.type]) {\n            if (schema.type === 'object' || schema.type === 'array') {\n                newProperty = PROPERTY_TYPE_MAPPING[schema.type](\n                    this.schemaValidatorFactory, this.validatorRegistry, this.expressionCompilerFactory, schema, parent, path, this);\n            } else {\n                newProperty = PROPERTY_TYPE_MAPPING[schema.type](\n                    this.schemaValidatorFactory, this.validatorRegistry, this.expressionCompilerFactory, schema, parent, path);\n            }\n        } else {\n            throw new TypeError(`Undefined type ${schema.type} (existing: ${Object.keys(PROPERTY_TYPE_MAPPING)})`);\n        }\n    }\n\n    newProperty._propertyBindingRegistry = this.propertyBindingRegistry;\n    newProperty._canonicalPath = _canonicalPath;\n\n    if (newProperty instanceof PropertyGroup) {\n      this.initializeRoot(newProperty);\n    }\n\n    return newProperty;\n  }\n\n  private initializeRoot(rootProperty: PropertyGroup) {\n    rootProperty.reset(null, true);\n    rootProperty._bindVisibility();\n  }\n}\n","import {isBlank} from './utils';\nimport { Injectable } from \"@angular/core\";\n\nfunction formatMessage(message, path) {\n  return `Parsing error on ${path}: ${message}`;\n}\n\nfunction schemaError(message, path): void {\n  let mesg = formatMessage(message, path);\n  throw new Error(mesg);\n}\n\nfunction schemaWarning(message, path): void {\n  let mesg = formatMessage(message, path);\n  throw new Error(mesg);\n}\n\n@Injectable()\nexport class SchemaPreprocessor {\n\n  static preprocess(jsonSchema: any, path = '/'): any {\n    jsonSchema = jsonSchema || {};\n    SchemaPreprocessor.normalizeExtensions(jsonSchema);\n    if (jsonSchema.type === 'object') {\n      SchemaPreprocessor.checkProperties(jsonSchema, path);\n      SchemaPreprocessor.checkAndCreateFieldsets(jsonSchema, path);\n    } else if (jsonSchema.type === 'array') {\n      SchemaPreprocessor.checkItems(jsonSchema, path);\n    }\n    SchemaPreprocessor.normalizeWidget(jsonSchema);\n    SchemaPreprocessor.recursiveCheck(jsonSchema, path);\n  }\n\n  private static checkProperties(jsonSchema, path: string) {\n    if (isBlank(jsonSchema.properties)) {\n      jsonSchema.properties = {};\n      schemaWarning('Provided json schema does not contain a \\'properties\\' entry. Output schema will be empty', path);\n    }\n  }\n\n  private static checkAndCreateFieldsets(jsonSchema: any, path: string) {\n    if (jsonSchema.fieldsets === undefined) {\n      if (jsonSchema.order !== undefined) {\n        SchemaPreprocessor.replaceOrderByFieldsets(jsonSchema);\n      } else {\n        SchemaPreprocessor.createFieldsets(jsonSchema);\n      }\n    }\n    SchemaPreprocessor.checkFieldsUsage(jsonSchema, path);\n  }\n\n  private static checkFieldsUsage(jsonSchema, path: string) {\n    let fieldsId: string[] = Object.keys(jsonSchema.properties);\n    let usedFields = {};\n    for (let fieldset of jsonSchema.fieldsets) {\n      for (let fieldId of fieldset.fields) {\n        if (usedFields[fieldId] === undefined) {\n          usedFields[fieldId] = [];\n        }\n        usedFields[fieldId].push(fieldset.id);\n      }\n    }\n\n    for (const fieldId of fieldsId) {\n      const isRequired = jsonSchema.required && jsonSchema.required.indexOf(fieldId) > -1;\n      if (isRequired && jsonSchema.properties[fieldId]) {\n        jsonSchema.properties[fieldId].isRequired = true;\n      }\n      if (usedFields.hasOwnProperty(fieldId)) {\n        if (usedFields[fieldId].length > 1) {\n          schemaError(`${fieldId} is referenced by more than one fieldset: ${usedFields[fieldId]}`, path);\n        }\n        delete usedFields[fieldId];\n      } else if (isRequired) {\n        schemaError(`${fieldId} is a required field but it is not referenced as part of a 'order' or a 'fieldset' property`, path);\n      } else {\n        delete jsonSchema[fieldId];\n        schemaWarning(`Removing unreferenced field ${fieldId}`, path);\n      }\n    }\n\n    for (let remainingfieldsId in usedFields) {\n      if (usedFields.hasOwnProperty(remainingfieldsId)) {\n        schemaWarning(`Referencing non-existent field ${remainingfieldsId} in one or more fieldsets`, path);\n      }\n    }\n  }\n\n  private static createFieldsets(jsonSchema) {\n    jsonSchema.order = Object.keys(jsonSchema.properties);\n    SchemaPreprocessor.replaceOrderByFieldsets(jsonSchema);\n  }\n\n  private static replaceOrderByFieldsets(jsonSchema) {\n    jsonSchema.fieldsets = [{\n      id: 'fieldset-default',\n      title: jsonSchema.title || '',\n      description: jsonSchema.description || '',\n      name: jsonSchema.name || '',\n      fields: jsonSchema.order\n    }];\n    delete jsonSchema.order;\n  }\n\n  private static normalizeWidget(fieldSchema: any) {\n    let widget = fieldSchema.widget;\n    if (widget === undefined) {\n      widget = {'id': fieldSchema.type};\n    } else if (typeof widget === 'string') {\n      widget = {'id': widget};\n    }\n    fieldSchema.widget = widget;\n  }\n\n  private static checkItems(jsonSchema, path) {\n    if (jsonSchema.items === undefined) {\n      schemaError('No \\'items\\' property in array', path);\n    }\n  }\n\n  private static recursiveCheck(jsonSchema, path: string) {\n    if (jsonSchema.type === 'object') {\n      for (let fieldId in jsonSchema.properties) {\n        if (jsonSchema.properties.hasOwnProperty(fieldId)) {\n          let fieldSchema = jsonSchema.properties[fieldId];\n          SchemaPreprocessor.preprocess(fieldSchema, path + fieldId + '/');\n        }\n      }\n      if (jsonSchema.hasOwnProperty('definitions')) {\n        for (let fieldId in jsonSchema.definitions) {\n          if (jsonSchema.definitions.hasOwnProperty(fieldId)) {\n            let fieldSchema = jsonSchema.definitions[fieldId];\n            SchemaPreprocessor.removeRecursiveRefProperties(fieldSchema, `#/definitions/${fieldId}`);\n            SchemaPreprocessor.preprocess(fieldSchema, path + fieldId + '/');\n          }\n        }\n      }\n    } else if (jsonSchema.type === 'array') {\n      SchemaPreprocessor.preprocess(jsonSchema.items, path + '*/');\n    }\n  }\n\n  private static removeRecursiveRefProperties(jsonSchema, definitionPath) {\n    // to avoid infinite loop\n    if (jsonSchema.type === 'object') {\n      for (let fieldId in jsonSchema.properties) {\n        if (jsonSchema.properties.hasOwnProperty(fieldId)) {\n          if (jsonSchema.properties[fieldId].$ref\n            && jsonSchema.properties[fieldId].$ref === definitionPath) {\n            delete jsonSchema.properties[fieldId];\n          } else if (jsonSchema.properties[fieldId].type === 'object') {\n            SchemaPreprocessor.removeRecursiveRefProperties(jsonSchema.properties[fieldId], definitionPath);\n          }\n        }\n      }\n    }\n  }\n  \n  /**\n   * Enables alias names for JSON schema extensions.\n   *\n   * Copies the value of each alias JSON schema property\n   * to the JSON schema property of ngx-schema-form.\n   *\n   * @param schema JSON schema to enable alias names.\n   */\n  private static normalizeExtensions(schema: any): void {\n    const extensions = [\n        { name: \"fieldsets\", regex: /^x-?field-?sets$/i },\n        { name: \"widget\",    regex: /^x-?widget$/i },\n        { name: \"visibleIf\", regex: /^x-?visible-?if$/i }\n    ];\n    const keys = Object.keys(schema);\n    for (let i = 0; i < keys.length; ++i) {\n      let k = keys[i];\n      let e = extensions.find(e => !!k.match(e.regex));\n      if (e) {\n        let v = schema[k];\n        let copy = JSON.parse(JSON.stringify(v));\n        schema[e.name] = copy;\n      }\n    }\n  }\n}\n\n","import { Injectable } from \"@angular/core\";\n/**\n * General purpose propery binding registry\n */\n@Injectable()\nexport class PropertyBindingRegistry {\n\n  private bindings: { [key: string]: PropertyBindings } = {};\n\n  getPropertyBindings(type: PropertyBindingTypes): PropertyBindings {\n    this.bindings[type] = this.bindings[type] || new PropertyBindings();\n    return this.bindings[type];\n  }\n\n  getPropertyBindingsVisibility() {\n    return this.getPropertyBindings(PropertyBindingTypes.visibility);\n  }\n}\n\n/**\n * Defines the types of supported property bindings.<br/>\n * For now only <code>visibility</code> is supported.<br/>\n */\nexport enum PropertyBindingTypes {\n  visibility\n}\n\n/**\n * Storage that holds all bindings that are property paths related.<br/>\n */\nexport class PropertyBindings {\n  sourcesIndex: SimplePropertyIndexer = new SimplePropertyIndexer();\n  dependenciesIndex: SimplePropertyIndexer = new SimplePropertyIndexer();\n\n  add(dependencyPath: string, sourcePropertyPath: string) {\n    this.sourcesIndex.store(sourcePropertyPath, dependencyPath);\n    this.dependenciesIndex.store(dependencyPath, sourcePropertyPath);\n  }\n\n  findByDependencyPath(dependencyPath: string): string[] {\n    const result = this.dependenciesIndex.find(dependencyPath);\n    result.results = result.results || [];\n    let values = [];\n    for (const res of result.results) {\n      values = values.concat(Object.keys(res.value));\n    }\n    return result.found ? values : [];\n  }\n\n  getBySourcePropertyPath(sourcePropertyPath: string): string[] {\n    const result = this.sourcesIndex.find(sourcePropertyPath);\n    result.results = result.results || [];\n    let values = [];\n    for (const res of result.results) {\n      values = values.concat(Object.keys(res.value));\n    }\n    return result.found ? values : [];\n  }\n\n  createPathIndex(path: string): string[] {\n    return path.split('/');\n  }\n}\n\n/**\n * Simple indexer to store property paths\n */\nexport class SimplePropertyIndexer {\n\n  static MARKER = '$____value';\n  index: object = {};\n  findOnlyWithValue = true;\n\n  private _createPathIndex(path: string) {\n    return path\n      .replace(new RegExp('//', 'g'), '/')\n      .replace(new RegExp('^/', 'g'), '')\n      .split('/').filter(item => item);\n  }\n\n  store(propertyPath: string, value?: any) {\n    this._storeIndex(this._createPathIndex(propertyPath), value);\n  }\n\n  private _storeIndex(pathIndex: string[], value?: string) {\n    let indexPos = this.index;\n    for (const key of pathIndex) {\n      indexPos[key] = indexPos[key] || {};\n      indexPos = indexPos[key];\n    }\n    if (indexPos && value) {\n      indexPos[SimplePropertyIndexer.MARKER] = indexPos[SimplePropertyIndexer.MARKER] || {};\n      indexPos[SimplePropertyIndexer.MARKER][value] = value;\n    }\n  }\n\n  /**\n   * Find path in index.<br/>\n   * Will find path like:<br/>\n   * <ul>\n   *     <li>/property/0/prop</li>\n   *     <li>/property/0/prop/2/test</li>\n   *     <li>/property/0/prop/&#42;/test</li>\n   *     <li>/property/&#42;/prop/1/test</li>\n   *     <li>/property/&#42;/prop/&#42;/test</li>\n   *     <li>/property/1/prop/&#42;/test</li>\n   *  </ul>\n   * @param path\n   */\n  find(path: string): IndexerResult {\n    return this._findInIndex(this._createPathIndex(path));\n  }\n\n  _findInIndex(path: string[]): IndexerResult {\n    const ixRes: IndexerResult = {target: path, found: false, results: []};\n    this.__findIndex(ixRes, path, this.index, []);\n    return ixRes;\n  }\n\n  __findIndex(indexerResults: IndexerResult, path: string[], index: object, parent?: string[]) {\n\n    const p = parent || [];\n    const segment = path[0];\n    const wild = ('*' === segment) ? Object.keys(index) : [];\n    const _keys = ((Array.isArray(segment) ? segment : [segment]) as string[]).concat(wild);\n    const keys = _keys.filter((item, pos) => '*' !== item && _keys.indexOf(item) === pos); // remove duplicates\n\n    if (index['*']) {\n      keys.push('*');\n    }\n\n    let paths = [];\n    for (const key of keys) {\n      const restPath = path.slice(1);\n      const restIndex = index[key];\n      const restParent = p.concat(key);\n\n      if (path.length === 1) {// collect only the full paths\n        if (!this.findOnlyWithValue || (restIndex && restIndex[SimplePropertyIndexer.MARKER])) {\n          indexerResults.results = indexerResults.results || [];\n          indexerResults.results.push({\n            path: restParent,\n            value: restIndex[SimplePropertyIndexer.MARKER]\n          });\n          paths.push(restParent);\n          indexerResults.found = indexerResults.results.length > 0;\n        }\n      }\n\n      if (!restPath || !restPath.length || !restIndex) {\n        break;\n      }\n      const restPaths = this.__findIndex(indexerResults, restPath, restIndex, restParent);\n\n      paths = paths.concat(restPaths);\n    }\n    return paths;\n  }\n\n}\n\nexport interface IndexerResult {\n  /**\n   * The path originally searched for\n   */\n  target: string[];\n  /**\n   * Flag for the status of found or not found.<br/>\n   * Usually <code>results</code> will be empty if no matches found.\n   */\n  found: boolean;\n  /**\n   * The result path and values from the index search.<br/>\n   * Usually <code>results</code> will be empty if no matches found.\n   */\n  results: {\n    /**\n     * The path that matched the <code>target</code>\n     * separated in segments\n     */\n    path: string[],\n    /**\n     * The value stored at the <code>path</code>\n     */\n    value: any\n  }[];\n}\n","export function isPresent(o) {\n  return o !== null && o !== undefined;\n}\n\nexport function isBlank(o) {\n  return o === null || o === undefined;\n}\n","import { Validator } from './validator';\nimport { Injectable } from \"@angular/core\";\n\n@Injectable()\nexport class ValidatorRegistry {\n  private validators: Validator[] = [];\n\n  register(path: string, validator: Validator) {\n    this.validators[path] = validator;\n  }\n\n  get(path: string): Validator {\n    return this.validators[path];\n  }\n\n  clear() {\n    this.validators = [];\n  }\n}\n","import {Binding} from './binding';\nimport { Injectable } from \"@angular/core\";\n\n@Injectable()\nexport class BindingRegistry {\n  bindings: Binding[] = [];\n\n  clear() {\n    this.bindings = [];\n  }\n\n  register(path: string, binding: Binding | Binding[]) {\n    this.bindings[path] = [].concat(binding);\n  }\n\n  get(path: string): Binding[] {\n    return this.bindings[path];\n  }\n}\n","import * as ZSchema from 'z-schema';\nimport { Injectable } from \"@angular/core\";\n\nexport abstract class SchemaValidatorFactory {\n  abstract createValidatorFn(schema): (value: any) => any;\n\n  abstract getSchema(schema, ref): any;\n\n  /**\n   * Override this method to reset the schema validator instance.<br/>\n   * This may be required since some schema validators keep a deep copy<br/>\n   * of your schemas and changes at runtime are not recognized by the schema validator.<br/>\n   * In this method you should either re-instantiate the schema validator or\n   * clear its cache.<br/>\n   * Example of re-instantiating schema validator\n   * <code>\n   *     reset(){\n   *         this.zschema = new ZSchema({})\n   *     }\n   * </code>\n   * <br/>\n   * Since this method it self does nothing there is <br/>\n   * no need to call the <code>super.reset()</code>\n   */\n  reset() {\n\n  }\n}\n\n@Injectable()\nexport class ZSchemaValidatorFactory extends SchemaValidatorFactory {\n\n  protected zschema;\n\n  constructor() {\n    super();\n    this.createSchemaValidator()\n  }\n\n  private createSchemaValidator() {\n    this.zschema =  new ZSchema({\n      breakOnFirstError: false\n    });\n  }\n\n  reset() {\n    this.createSchemaValidator()\n  }\n\n  createValidatorFn(schema: any) {\n    return (value): { [key: string]: boolean } => {\n\n      if (schema.type === 'number' || schema.type === 'integer') {\n        value = +value;\n      }\n\n      this.zschema.validate(value, schema);\n      let err = this.zschema.getLastErrors();\n\n      this.denormalizeRequiredPropertyPaths(err);\n\n      return err || null;\n    };\n  }\n\n  getSchema(schema: any, ref: string) {\n    // check definitions are valid\n    const isValid = this.zschema.compileSchema(schema);\n    if (isValid) {\n      return this.getDefinition(schema, ref);\n    } else {\n      throw this.zschema.getLastError();\n    }\n  }\n\n  private denormalizeRequiredPropertyPaths(err: any[]) {\n    if (err && err.length) {\n      err = err.map(error => {\n        if (error.path === '#/' && error.code === 'OBJECT_MISSING_REQUIRED_PROPERTY') {\n          error.path = `${error.path}${error.params[0]}`;\n        }\n        return error;\n      });\n    }\n  }\n\n  private getDefinition(schema: any, ref: string) {\n    let foundSchema = schema;\n    ref.split('/').slice(1).forEach(ptr => {\n      if (ptr) {\n        foundSchema = foundSchema[ptr];\n      }\n    });\n    return foundSchema;\n  }\n}\n\n","export class WidgetRegistry {\n\n  private widgets: { [type: string]: any } = {};\n\n  private defaultWidget: any;\n\n  constructor() { }\n\n  setDefaultWidget(widget: any) {\n    this.defaultWidget = widget;\n  }\n\n  getDefaultWidget() {\n    return this.defaultWidget;\n  }\n\n  hasWidget(type: string) {\n    return this.widgets.hasOwnProperty(type);\n  }\n\n  register(type: string, widget: any) {\n    this.widgets[type] = widget;\n  }\n\n  getWidgetType(type: string): any {\n    if (this.hasWidget(type)) {\n      return this.widgets[type];\n    }\n    return this.defaultWidget;\n  }\n}\n","import {\n  ViewContainerRef,\n  ComponentRef,\n  ComponentFactoryResolver,\n  Injectable\n} from '@angular/core';\n\nimport { WidgetRegistry } from './widgetregistry';\n\n@Injectable()\nexport class WidgetFactory {\n\n  private resolver: ComponentFactoryResolver;\n  private registry: WidgetRegistry;\n\n  constructor(registry: WidgetRegistry, resolver: ComponentFactoryResolver) {\n    this.registry = registry;\n    this.resolver = resolver;\n  }\n\n  createWidget(container: ViewContainerRef, type: string): ComponentRef<any> {\n    let componentClass = this.registry.getWidgetType(type);\n\n    let componentFactory = this.resolver.resolveComponentFactory(componentClass);\n    return container.createComponent(componentFactory);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class TerminatorService {\n  public onDestroy: Subject<boolean>;\n\n  constructor() {\n    this.onDestroy = new Subject();\n  }\n\n  destroy() {\n    this.onDestroy.next(true);\n  }\n}\n","export abstract class ExpressionCompilerFactory {\n    public abstract createExpressionCompiler(): ExpressionCompiler;\n    public abstract createExpressionCompilerVisibilityIf(): ExpressionCompilerVisibilityIf;\n}\n\nexport interface ExpressionCompiler {\n    evaluate(expression: string, context: object): any;\n}\n\nexport interface ExpressionCompilerVisibilityIf {\n    evaluate(expression: string, context: ExpressionContextVisibilitIf): any;\n}\n/**\n * UseCase:<br/>\n * When evaluating the expression of a <code>visibilityIf</code> condition\n * an instance of this definition will be passed as context.<br/>\n * This will give access to the source and target <code>FormProperty</code>.\n */\nexport interface ExpressionContextVisibilitIf {\n    /**\n     * The source property which has the <code>visibilityIf</code> defined\n     */\n    source: FormProperty\n    /**\n     * The target property given with the <code>visibilityIf</code>\n     * <em>path</em> property\n     */\n    target: FormProperty\n}\n\n\nimport * as JEXL from 'jexl';\nimport { FormProperty } from './model';\n\nexport class JEXLExpressionCompilerFactory extends ExpressionCompilerFactory {\n    public createExpressionCompiler(): ExpressionCompiler {\n        return new JEXLExpressionCompiler();\n    }\n\n    public createExpressionCompilerVisibilityIf(): ExpressionCompilerVisibilityIf {\n        return new JEXLExpressionCompilerVisibiltyIf();\n    }\n}\n\nexport class JEXLExpressionCompiler implements ExpressionCompiler {\n    evaluate(expression: string, context: object = {}): any {\n        return new JEXL.Jexl().evalSync(expression, context)\n    }\n}\n\nexport class JEXLExpressionCompilerVisibiltyIf implements ExpressionCompilerVisibilityIf {\n    evaluate(expression: string, context: ExpressionContextVisibilitIf = { source: {} as FormProperty, target: {} as FormProperty }): any {\n        return new JEXL.Jexl().evalSync(expression, context)\n    }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnChanges,\n  EventEmitter,\n  Input,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport {Action} from './model/action';\nimport {ActionRegistry} from './model/actionregistry';\nimport {FormProperty} from './model/formproperty';\nimport {FormPropertyFactory} from './model/formpropertyfactory';\nimport {SchemaPreprocessor} from './model/schemapreprocessor';\nimport {ValidatorRegistry} from './model/validatorregistry';\nimport {Validator} from './model/validator';\nimport {Binding} from './model/binding';\nimport {BindingRegistry} from './model/bindingregistry';\n\nimport {SchemaValidatorFactory} from './schemavalidatorfactory';\nimport {WidgetFactory} from './widgetfactory';\nimport {TerminatorService} from './terminator.service';\nimport {PropertyBindingRegistry} from './property-binding-registry';\nimport { ExpressionCompilerFactory } from './expression-compiler-factory';\n\nexport function useFactory(schemaValidatorFactory, validatorRegistry, propertyBindingRegistry, expressionCompilerFactory) {\n  return new FormPropertyFactory(schemaValidatorFactory, validatorRegistry, propertyBindingRegistry, expressionCompilerFactory);\n}\n\n@Component({\n  selector: 'sf-form',\n  template: `\n    <form *ngIf=\"rootProperty\" [attr.name]=\"rootProperty.rootName\" [attr.id]=\"rootProperty.rootName\">\n      <sf-form-element [formProperty]=\"rootProperty\"></sf-form-element>\n    </form>`,\n  providers: [\n    ActionRegistry,\n    ValidatorRegistry,\n    PropertyBindingRegistry,\n    BindingRegistry,\n    SchemaPreprocessor,\n    WidgetFactory,\n    {\n      provide: FormPropertyFactory,\n      useFactory: useFactory,\n      deps: [SchemaValidatorFactory, ValidatorRegistry, PropertyBindingRegistry, ExpressionCompilerFactory]\n    },\n    TerminatorService,\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: FormComponent,\n      multi: true\n    }\n  ]\n})\nexport class FormComponent implements OnChanges, ControlValueAccessor {\n\n  @Input() schema: any = null;\n\n  @Input() model: any;\n\n  @Input() actions: { [actionId: string]: Action } = {};\n\n  @Input() validators: { [path: string]: Validator } = {};\n\n  @Input() bindings: { [path: string]: Binding } = {};\n\n  @Output() onChange = new EventEmitter<{ value: any }>();\n\n  @Output() modelChange = new EventEmitter<any>();\n\n  @Output() isValid = new EventEmitter<boolean>();\n\n  @Output() onErrorChange = new EventEmitter<{ value: any[] }>();\n\n  @Output() onErrorsChange = new EventEmitter<{value: any}>();\n\n  rootProperty: FormProperty = null;\n\n  private onChangeCallback: any;\n\n  constructor(\n    private formPropertyFactory: FormPropertyFactory,\n    private actionRegistry: ActionRegistry,\n    private validatorRegistry: ValidatorRegistry,\n    private bindingRegistry: BindingRegistry,\n    private cdr: ChangeDetectorRef,\n    private terminator: TerminatorService\n  ) { }\n\n  writeValue(obj: any) {\n    if (this.rootProperty) {\n      this.rootProperty.reset(obj, false);\n    }\n  }\n\n  registerOnChange(fn: any) {\n    this.onChangeCallback = fn;\n    if (this.rootProperty) {\n      this.rootProperty.valueChanges.subscribe(\n        this.onValueChanges.bind(this)\n      );\n    }\n  }\n\n  // TODO implement\n  registerOnTouched(fn: any) {\n  }\n\n  // TODO implement\n  // setDisabledState(isDisabled: boolean)?: void\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.validators) {\n      this.setValidators();\n    }\n\n    if (changes.actions) {\n      this.setActions();\n    }\n\n    if (changes.bindings) {\n      this.setBindings();\n    }\n\n    if (this.schema && !this.schema.type) {\n      this.schema.type = 'object';\n    }\n\n    if (this.schema && changes.schema) {\n      if (!changes.schema.firstChange) {\n        this.terminator.destroy();\n      }\n\n      SchemaPreprocessor.preprocess(this.schema);\n      this.rootProperty = this.formPropertyFactory.createProperty(this.schema);\n      if (this.model) {\n        // this.rootProperty.reset(this.model, false);\n      }\n\n      this.rootProperty.valueChanges.subscribe(\n        this.onValueChanges.bind(this)\n      );\n\n      this.rootProperty.errorsChanges.subscribe(value => {\n        this.onErrorChange.emit({value: value});\n        this.isValid.emit(!(value && value.length));\n      });\n\n    }\n\n    if (this.schema && (changes.model || changes.schema )) {\n      this.rootProperty.reset(this.model, false);\n      this.cdr.detectChanges();\n    }\n\n  }\n\n  private setValidators() {\n    this.validatorRegistry.clear();\n    if (this.validators) {\n      for (const validatorId in this.validators) {\n        if (this.validators.hasOwnProperty(validatorId)) {\n          this.validatorRegistry.register(validatorId, this.validators[validatorId]);\n        }\n      }\n    }\n  }\n\n  private setActions() {\n    this.actionRegistry.clear();\n    if (this.actions) {\n      for (const actionId in this.actions) {\n        if (this.actions.hasOwnProperty(actionId)) {\n          this.actionRegistry.register(actionId, this.actions[actionId]);\n        }\n      }\n    }\n  }\n\n  private setBindings() {\n    this.bindingRegistry.clear();\n    if (this.bindings) {\n      for (const bindingPath in this.bindings) {\n        if (this.bindings.hasOwnProperty(bindingPath)) {\n          this.bindingRegistry.register(bindingPath, this.bindings[bindingPath]);\n        }\n      }\n    }\n  }\n\n  public reset() {\n    this.rootProperty.reset(null, true);\n  }\n\n  private setModel(value: any) {\n    if (this.model) {\n      Object.assign(this.model, value);\n    } else {\n      this.model = value;\n    }\n  }\n\n  private onValueChanges(value) {\n    if (this.onChangeCallback) {\n      this.setModel(value);\n      this.onChangeCallback(value);\n    }\n\n    // two way binding is used\n    if (this.modelChange.observers.length > 0) {\n      if (!this.onChangeCallback) {\n        this.setModel(value);\n      }\n    }\n    this.onChange.emit({value: value});\n  }\n}\n","import {\n  Component, ElementRef,\n  Input, OnDestroy,\n  OnInit, Renderer2\n} from '@angular/core';\n\nimport {\n  FormControl\n} from '@angular/forms';\n\nimport {Widget} from './widget';\n\nimport {ActionRegistry} from './model/actionregistry';\nimport {FormProperty} from './model/formproperty';\nimport {BindingRegistry} from './model/bindingregistry';\nimport {Binding} from './model/binding';\n\n@Component({\n  selector: 'sf-form-element',\n  template: `\n    <div *ngIf=\"formProperty.visible\"\n         [class.has-error]=\"!control.valid\"\n         [class.has-success]=\"control.valid\">\n      <sf-widget-chooser\n        (widgetInstanciated)=\"onWidgetInstanciated($event)\"\n        [widgetInfo]=\"formProperty.schema.widget\">\n      </sf-widget-chooser>\n      <sf-form-element-action *ngFor=\"let button of buttons\" [button]=\"button\" [formProperty]=\"formProperty\"></sf-form-element-action>\n    </div>`\n})\nexport class FormElementComponent implements OnInit, OnDestroy {\n\n  private static counter = 0;\n\n  @Input() formProperty: FormProperty;\n  control: FormControl = new FormControl('', () => null);\n\n  widget: Widget<any> = null;\n\n  buttons = [];\n\n  unlisten = [];\n\n  constructor(private actionRegistry: ActionRegistry,\n              private bindingRegistry: BindingRegistry,\n              private renderer: Renderer2,\n              private elementRef: ElementRef) {\n  }\n\n  ngOnInit() {\n    this.parseButtons();\n    this.setupBindings();\n  }\n\n  private setupBindings() {\n    const bindings: Binding[] = this.bindingRegistry.get(this.formProperty.path);\n    if ((bindings || []).length) {\n      bindings.forEach((binding) => {\n        for (const eventId in binding) {\n          this.createBinding(eventId, binding[eventId]);\n        }\n      });\n    }\n  }\n\n  private createBinding(eventId, listener) {\n    this.unlisten.push(this.renderer.listen(this.elementRef.nativeElement,\n      eventId,\n      (event) => {\n        if (listener instanceof Function) {\n          listener(event, this.formProperty);\n        } else {\n          console.warn('Calling non function handler for eventId ' + eventId + ' for path ' + this.formProperty.path);\n        }\n      }));\n  }\n\n  private parseButtons() {\n    if (this.formProperty.schema.buttons !== undefined) {\n      this.buttons = this.formProperty.schema.buttons;\n\n      for (let button of this.buttons) {\n        this.createButtonCallback(button);\n      }\n    }\n  }\n\n  private createButtonCallback(button) {\n    button.action = (e) => {\n      let action;\n      if (button.id && (action = this.actionRegistry.get(button.id))) {\n        if (action) {\n          action(this.formProperty, button.parameters);\n        }\n      }\n      e.preventDefault();\n    };\n  }\n\n  onWidgetInstanciated(widget: Widget<any>) {\n    this.widget = widget;\n    let id = this.formProperty.canonicalPathNotation || 'field' + (FormElementComponent.counter++);\n    if (this.formProperty.root.rootName) {\n      id = `${this.formProperty.root.rootName}:${id}`;\n    }\n\n    this.widget.formProperty = this.formProperty;\n    this.widget.schema = this.formProperty.schema;\n    this.widget.name = id;\n    this.widget.id = id;\n    this.widget.control = this.control;\n  }\n\n  ngOnDestroy(): void {\n    if (this.unlisten) {\n      this.unlisten.forEach((item) => {\n        item();\n      });\n    }\n  }\n\n}\n","import {\n  Component,\n  ComponentRef,\n  Input,\n  OnChanges,\n  ViewChild,\n  ViewContainerRef,\n  OnInit,\n  OnDestroy\n} from \"@angular/core\";\nimport {Subscription} from 'rxjs';\nimport {WidgetFactory} from \"./widgetfactory\";\nimport {TerminatorService} from \"./terminator.service\";\n\n@Component({\n  selector: 'sf-form-element-action',\n  template: '<ng-template #target></ng-template>'\n})\nexport class FormElementComponentAction implements OnInit, OnChanges, OnDestroy {\n\n  @Input()\n  button: any;\n\n  @Input()\n  formProperty: any;\n\n  @ViewChild('target', { read: ViewContainerRef, static: true }) container: ViewContainerRef;\n\n  private ref: ComponentRef<any>;\n  private subs: Subscription;\n\n  constructor(private widgetFactory: WidgetFactory = null,\n              private terminator: TerminatorService) {\n  }\n\n  ngOnInit() {\n    this.subs = this.terminator.onDestroy.subscribe(destroy => {\n      if (destroy) {\n        this.ref.destroy();\n      }\n    });\n  }\n\n  ngOnChanges() {\n    this.ref = this.widgetFactory.createWidget(this.container, this.button.widget || 'button');\n    this.ref.instance.button = this.button;\n    this.ref.instance.formProperty = this.formProperty;\n  }\n\n  ngOnDestroy() {\n    this.subs.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ComponentRef,\n  ChangeDetectorRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  OnInit,\n  OnDestroy\n} from '@angular/core';\nimport { TerminatorService } from './terminator.service';\nimport { WidgetFactory } from './widgetfactory';\nimport { Subscription } from 'rxjs';\n\n\n@Component({\n  selector: 'sf-widget-chooser',\n  template: `<div #target></div>`,\n})\nexport class WidgetChooserComponent implements OnInit, OnChanges, OnDestroy {\n\n  @Input() widgetInfo: any;\n\n  @Output() widgetInstanciated = new EventEmitter<any>();\n\n  @ViewChild('target', { read: ViewContainerRef, static: true }) container: ViewContainerRef;\n\n  private widgetInstance: any;\n  private ref: ComponentRef<any>;\n  private subs: Subscription;\n\n  constructor(\n    private widgetFactory: WidgetFactory = null,\n    private cdr: ChangeDetectorRef,\n    private terminator: TerminatorService,\n  ) { }\n\n  ngOnInit() {\n    this.subs = this.terminator.onDestroy.subscribe(destroy => {\n      if (destroy) {\n        this.ref.destroy();\n      }\n    });\n  }\n\n  ngOnChanges() {\n    this.ref = this.widgetFactory.createWidget(this.container, this.widgetInfo.id);\n    this.widgetInstanciated.emit(this.ref.instance);\n    this.widgetInstance = this.ref.instance;\n    this.cdr.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this.subs.unsubscribe();\n  }\n}\n","import {FormProperty} from './formproperty';\n\nexport abstract class AtomicProperty extends FormProperty {\n\n  setValue(value, onlySelf = false) {\n    this._value = value;\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  reset(value: any = null, onlySelf = true) {\n    this.resetValue(value);\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  resetValue(value: any): any {\n    if (value === null) {\n      if (this.schema.default !== undefined) {\n        value = this.schema.default;\n      } else {\n        value = this.fallbackValue();\n      }\n    }\n    this._value = value;\n  }\n\n  public _hasValue(): boolean {\n    return this.fallbackValue() !== this.value;\n  }\n\n  abstract fallbackValue(): any;\n\n  public _updateValue() {\n  }\n}\n","import { PROPERTY_TYPE_MAPPING } from './typemapping';\nimport {PropertyGroup} from './formproperty';\nimport {FormPropertyFactory} from './formpropertyfactory';\nimport {SchemaValidatorFactory} from '../schemavalidatorfactory';\nimport {ValidatorRegistry} from './validatorregistry';\nimport { ExpressionCompilerFactory } from '../expression-compiler-factory';\n\nexport class ObjectProperty extends PropertyGroup {\n\n  private propertiesId: string[] = [];\n\n  constructor(private formPropertyFactory: FormPropertyFactory,\n              schemaValidatorFactory: SchemaValidatorFactory,\n              validatorRegistry: ValidatorRegistry,\n              expressionCompilerFactory: ExpressionCompilerFactory,\n              schema: any,\n              parent: PropertyGroup,\n              path: string) {\n    super(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);\n    this.createProperties();\n  }\n\n  setValue(value: any, onlySelf: boolean) {\n    for (const propertyId in value) {\n      if (value.hasOwnProperty(propertyId)) {\n        this.properties[propertyId].setValue(value[propertyId], true);\n      }\n    }\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  reset(value: any, onlySelf = true) {\n    value = value || this.schema.default || {};\n    this.resetProperties(value);\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  resetProperties(value: any) {\n    for (const propertyId in this.schema.properties) {\n      if (this.schema.properties.hasOwnProperty(propertyId)) {\n        this.properties[propertyId].reset(value[propertyId], true);\n      }\n    }\n  }\n\n  createProperties() {\n    this.properties = {};\n    this.propertiesId = [];\n    for (const propertyId in this.schema.properties) {\n      if (this.schema.properties.hasOwnProperty(propertyId)) {\n        const propertySchema = this.schema.properties[propertyId];\n        this.properties[propertyId] = this.formPropertyFactory.createProperty(propertySchema, this, propertyId);\n        this.propertiesId.push(propertyId);\n      }\n    }\n  }\n\n  public _hasValue(): boolean {\n    return !!Object.keys(this.value).length;\n  }\n\n  public _updateValue() {\n    this.reduceValue();\n  }\n\n  public _runValidation() {\n    super._runValidation();\n\n    if (this._errors) {\n      this._errors.forEach(error => {\n        const prop = this.searchProperty(error.path.slice(1));\n        if (prop) {\n          prop.extendErrors(error);\n        }\n      });\n    }\n  }\n\n  private reduceValue(): void {\n    const value = {};\n    this.forEachChild((property, propertyId: string) => {\n      if (property.visible && property._hasValue()) {\n        value[propertyId] = property.value;\n      }\n    });\n    this._value = value;\n  }\n}\n\nPROPERTY_TYPE_MAPPING.object = (\n    schemaValidatorFactory: SchemaValidatorFactory,\n    validatorRegistry: ValidatorRegistry,\n    expressionCompilerFactory: ExpressionCompilerFactory,\n    schema: any,\n    parent: PropertyGroup,\n    path: string,\n    formPropertyFactory: FormPropertyFactory,\n) => {\n    return new ObjectProperty(\n        formPropertyFactory, schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);\n};\n","import {FormProperty, PropertyGroup} from './formproperty';\nimport {FormPropertyFactory} from './formpropertyfactory';\nimport { PROPERTY_TYPE_MAPPING } from './typemapping';\nimport {SchemaValidatorFactory} from '../schemavalidatorfactory';\nimport {ValidatorRegistry} from './validatorregistry';\nimport { ExpressionCompilerFactory } from '../expression-compiler-factory';\n\nexport class ArrayProperty extends PropertyGroup {\n\n  constructor(private formPropertyFactory: FormPropertyFactory,\n              schemaValidatorFactory: SchemaValidatorFactory,\n              validatorRegistry: ValidatorRegistry,\n              expressionCompilerFactory: ExpressionCompilerFactory,\n              schema: any,\n              parent: PropertyGroup,\n              path: string) {\n    super(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);\n  }\n\n  addItem(value: any = null): FormProperty {\n    let newProperty = this.addProperty();\n    newProperty.reset(value, false);\n    return newProperty;\n  }\n\n  private addProperty() {\n    let newProperty = this.formPropertyFactory.createProperty(this.schema.items, this);\n    (<FormProperty[]>this.properties).push(newProperty);\n    return newProperty;\n  }\n\n  removeItem(item: FormProperty) {\n    this.properties = (<FormProperty[]>this.properties).filter(i => i !== item);\n    this.updateValueAndValidity(false, true);\n  }\n\n  setValue(value: any, onlySelf: boolean) {\n    this.createProperties();\n    this.resetProperties(value);\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  public _hasValue(): boolean {\n    return true;\n  }\n\n  public _updateValue() {\n    this.reduceValue();\n  }\n\n  private reduceValue(): void {\n    const value = [];\n    this.forEachChild((property, _) => {\n      if (property.visible && property._hasValue()) {\n        value.push(property.value);\n      }\n    });\n    this._value = value;\n  }\n\n  reset(value: any, onlySelf = true) {\n    value = value || this.schema.default || [];\n    this.properties = [];\n    this.resetProperties(value);\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  private createProperties() {\n    this.properties = [];\n  }\n\n\n  private resetProperties(value: any) {\n    for (let idx in value) {\n      if (value.hasOwnProperty(idx)) {\n        let property = this.addProperty();\n        property.reset(value[idx], true);\n      }\n    }\n  }\n}\n\nPROPERTY_TYPE_MAPPING.array = (\n    schemaValidatorFactory: SchemaValidatorFactory,\n    validatorRegistry: ValidatorRegistry,\n    expressionCompilerFactory: ExpressionCompilerFactory,\n    schema: any,\n    parent: PropertyGroup,\n    path: string,\n    formPropertyFactory: FormPropertyFactory,\n) => {\n    return new ArrayProperty(\n        formPropertyFactory, schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);\n};\n","import { AtomicProperty } from './atomicproperty';\nimport { PROPERTY_TYPE_MAPPING } from './typemapping';\nimport { PropertyGroup } from './formproperty';\nimport { ExpressionCompilerFactory } from '../expression-compiler-factory';\nimport { ValidatorRegistry } from './validatorregistry';\nimport { SchemaValidatorFactory } from '../schemavalidatorfactory';\n\nexport class StringProperty extends AtomicProperty {\n\n  fallbackValue() {\n    return '';\n  }\n\n}\n\nPROPERTY_TYPE_MAPPING.string = (\n    schemaValidatorFactory: SchemaValidatorFactory,\n    validatorRegistry: ValidatorRegistry,\n    expressionCompilerFactory: ExpressionCompilerFactory,\n    schema: any,\n    parent: PropertyGroup,\n    path: string\n) => {\n    return new StringProperty(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);\n};\n","import { AtomicProperty } from './atomicproperty';\nimport { ValidatorRegistry, PropertyGroup } from '.';\nimport { ExpressionCompilerFactory } from '../expression-compiler-factory';\nimport { SchemaValidatorFactory } from '../schemavalidatorfactory';\nimport { PROPERTY_TYPE_MAPPING } from './typemapping';\n\nexport class BooleanProperty extends AtomicProperty {\n\n  fallbackValue() {\n    return null;\n  }\n}\n\nPROPERTY_TYPE_MAPPING.boolean = (\n    schemaValidatorFactory: SchemaValidatorFactory,\n    validatorRegistry: ValidatorRegistry,\n    expressionCompilerFactory: ExpressionCompilerFactory,\n    schema: any,\n    parent: PropertyGroup,\n    path: string\n) => {\n    return new BooleanProperty(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);\n};\n","import {AtomicProperty} from './atomicproperty';\nimport { ValidatorRegistry, PropertyGroup } from '.';\nimport { ExpressionCompilerFactory } from '../expression-compiler-factory';\nimport { SchemaValidatorFactory } from '../schemavalidatorfactory';\nimport { PROPERTY_TYPE_MAPPING } from './typemapping';\n\nexport class NumberProperty extends AtomicProperty {\n\n  fallbackValue() {\n    return null;\n  }\n\n  setValue(value, onlySelf = false) {\n    if (typeof value === 'string') {\n      if (value.length) {\n        value = value.indexOf('.') > -1 ? parseFloat(value) : parseInt(value, 10);\n      } else {\n        value = null;\n      }\n    }\n    this._value = value;\n    this.updateValueAndValidity(onlySelf, true);\n  }\n}\n\nPROPERTY_TYPE_MAPPING.integer = (\n    schemaValidatorFactory: SchemaValidatorFactory,\n    validatorRegistry: ValidatorRegistry,\n    expressionCompilerFactory: ExpressionCompilerFactory,\n    schema: any,\n    parent: PropertyGroup,\n    path: string\n) => {\n    return new NumberProperty(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);\n};\n\n PROPERTY_TYPE_MAPPING.number = (\n    schemaValidatorFactory: SchemaValidatorFactory,\n    validatorRegistry: ValidatorRegistry,\n    expressionCompilerFactory: ExpressionCompilerFactory,\n    schema: any,\n    parent: PropertyGroup,\n    path: string\n) => {\n    return new NumberProperty(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);\n};\n","import { Validator } from '../../model/validator';\n\nexport enum FieldType {\n  String = 'string',\n  Object = 'object',\n  Array = 'array',\n  Boolean = 'boolean',\n  Integer =  'integer',\n  Number = 'number',\n}\n\nexport interface Field {\n  name: string;\n  required: boolean;\n  getSchema(): any;\n  getButtons(): any;\n  getValidators(): { path: string, validator: Validator }[];\n}\n\n\n","import {AfterViewInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\n\nimport {ArrayProperty} from './model/arrayproperty';\nimport {FormProperty} from './model/formproperty';\nimport {ObjectProperty} from './model/objectproperty';\n\nexport abstract class Widget<T extends FormProperty> {\n  formProperty: T;\n  control: FormControl;\n  errorMessages: string[];\n\n  id: string = '';\n  name: string = '';\n  schema: any = {};\n}\n\nexport class ControlWidget extends Widget<FormProperty> implements AfterViewInit {\n\n  ngAfterViewInit() {\n    const control = this.control;\n    this.formProperty.valueChanges.subscribe((newValue) => {\n      if (control.value !== newValue) {\n        control.setValue(newValue, {emitEvent: false});\n      }\n    });\n    this.formProperty.errorsChanges.subscribe((errors) => {\n      control.setErrors(errors, { emitEvent: true });\n      const messages = (errors || [])\n        .filter(e => {\n          return e.path && e.path.slice(1) === this.formProperty.path;\n        })\n        .map(e => e.message);\n      this.errorMessages = messages.filter((m, i) => messages.indexOf(m) === i);\n    });\n    control.valueChanges.subscribe((newValue) => {\n      this.formProperty.setValue(newValue, false);\n    });\n  }\n\n}\n\nexport class ArrayLayoutWidget extends Widget<ArrayProperty> implements AfterViewInit {\n\n  ngAfterViewInit() {\n    const control = this.control;\n    this.formProperty.errorsChanges.subscribe((errors) => {\n      control.setErrors(errors, {emitEvent: true});\n    });\n  }\n}\n\nexport class ObjectLayoutWidget extends Widget<ObjectProperty> implements AfterViewInit {\n\n  ngAfterViewInit() {\n    const control = this.control;\n    this.formProperty.errorsChanges.subscribe((errors) => {\n      control.setErrors(errors, {emitEvent: true});\n    });\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { ArrayLayoutWidget } from '../../widget';\nimport { FormProperty } from '../../model';\n\n@Component({\n  selector: 'sf-array-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n\t<span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<div *ngFor=\"let itemProperty of formProperty.properties\">\n\t\t<sf-form-element [formProperty]=\"itemProperty\"></sf-form-element>\n\t\t<button (click)=\"removeItem(itemProperty)\" class=\"btn btn-default array-remove-button\"\n\t\t\t[disabled]=\"isRemoveButtonDisabled()\" \n\t\t\t*ngIf=\"!(schema.hasOwnProperty('minItems') && schema.hasOwnProperty('maxItems') && schema.minItems === schema.maxItems)\"\n\t\t\t>\n\t\t\t<span class=\"glyphicon glyphicon-minus\" aria-hidden=\"true\"></span> Remove\n\t\t</button>\n\t</div>\n\t<button (click)=\"addItem()\" class=\"btn btn-default array-add-button\"\n\t\t[disabled]=\"isAddButtonDisabled()\"\n\t\t*ngIf=\"!(schema.hasOwnProperty('minItems') && schema.hasOwnProperty('maxItems') && schema.minItems === schema.maxItems)\"\n\t>\n\t\t<span class=\"glyphicon glyphicon-plus\" aria-hidden=\"true\"></span> Add\n\t</button>\n</div>`\n})\nexport class ArrayWidget extends ArrayLayoutWidget {\n  buttonDisabledAdd:boolean\n  buttonDisabledRemove:boolean\n\n  addItem() {\n\tthis.formProperty.addItem();\n\tthis.updateButtonDisabledState()\n  }\n\n  removeItem(item: FormProperty) {\n\tthis.formProperty.removeItem(item);\n\tthis.updateButtonDisabledState()\n  }\n\n  trackByIndex(index: number, item: any) {\n    return index;\n  }\n\n\tupdateButtonDisabledState() {\n\t\tthis.buttonDisabledAdd = this.isAddButtonDisabled()\n\t\tthis.buttonDisabledRemove = this.isRemoveButtonDisabled()\n\t}\n\tisAddButtonDisabled() {\n\t\tif (this.schema.hasOwnProperty('maxItems') && Array.isArray(this.formProperty.properties)) {\n\t\t\tif (this.formProperty.properties.length >= this.schema.maxItems) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n\n\tisRemoveButtonDisabled() {\n\t\tif (this.schema.hasOwnProperty('minItems') && Array.isArray(this.formProperty.properties)) {\n\t\t\tif (this.formProperty.properties.length <= this.schema.minItems) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n}\n","import {Component} from \"@angular/core\";\n\n@Component({\n  selector: 'sf-button-widget',\n  template: '<button (click)=\"button.action($event)\">{{button.label}}</button>'\n})\nexport class ButtonWidget {\n  public button\n  public formProperty\n}\n","import { Component } from '@angular/core';\n\nimport { ObjectLayoutWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-form-object',\n  template: `<fieldset *ngFor=\"let fieldset of formProperty.schema.fieldsets\">\n\t<legend *ngIf=\"fieldset.title\">{{fieldset.title}}</legend>\n\t<div *ngIf=\"fieldset.description\">{{fieldset.description}}</div>\n\t<div *ngFor=\"let fieldId of fieldset.fields\">\n\t\t<sf-form-element [formProperty]=\"formProperty.getProperty(fieldId)\"></sf-form-element>\n\t</div>\n</fieldset>`\n})\nexport class ObjectWidget extends ObjectLayoutWidget { }\n","import { Component, AfterViewInit } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-checkbox-widget',\n  template: `<div class=\"widget form-group\">\n    <label [attr.for]=\"id\" class=\"horizontal control-label\">\n        {{ schema.title }}\n    </label>\n\t<div *ngIf=\"schema.type!='array'\" class=\"checkbox\">\n\t\t<label class=\"horizontal control-label\">\n\t\t\t<input [formControl]=\"control\" [attr.name]=\"name\" [attr.id]=\"id\" [indeterminate]=\"control.value !== false && control.value !== true ? true :null\" type=\"checkbox\" [disabled]=\"schema.readOnly\">\n\t\t\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n\t\t\t{{schema.description}}\n\t\t</label>\n\t</div>\n\t<ng-container *ngIf=\"schema.type==='array'\">\n\t\t<div *ngFor=\"let option of schema.items.oneOf\" class=\"checkbox\">\n\t\t\t<label class=\"horizontal control-label\">\n\t\t\t\t<input [attr.name]=\"name\"\n\t\t\t\t\tvalue=\"{{option.enum[0]}}\" type=\"checkbox\" \n\t\t\t\t\t[attr.disabled]=\"schema.readOnly\"\n\t\t\t\t\t(change)=\"onCheck($event.target)\"\n\t\t\t\t\t[attr.checked]=\"checked[option.enum[0]] ? true : null\"\n\t\t\t\t\t[attr.id]=\"id + '.' + option.enum[0]\"\n\t\t\t\t\t>\n\t\t\t\t{{option.description}}\n\t\t\t</label>\n\t\t</div>\n\t</ng-container>\n</div>`\n})\nexport class CheckboxWidget extends ControlWidget implements AfterViewInit {\n\n\tchecked: any = {};\n\n\tngAfterViewInit() {\n\t\tconst control = this.control;\n\t\tthis.formProperty.valueChanges.subscribe((newValue) => {\n\t\t\tif (control.value !== newValue) {\n\t\t\t\tcontrol.setValue(newValue, { emitEvent: false });\n\t\t\t\tif (newValue && Array.isArray(newValue)) {\n\t\t\t\t\tnewValue.map(v => this.checked[v] = true);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.formProperty.errorsChanges.subscribe((errors) => {\n\t\t\tcontrol.setErrors(errors, { emitEvent: true });\n\t\t});\n\t\tcontrol.valueChanges.subscribe((newValue) => {\n\t\t\tthis.formProperty.setValue(newValue, false);\n\t\t});\n\t}\n\n\tonCheck(el) {\n\t\tif (el.checked) {\n\t\t\tthis.checked[el.value] = true;\n\t\t} else {\n\t\t\tdelete this.checked[el.value];\n\t\t}\n\t\tthis.formProperty.setValue(Object.keys(this.checked), false);\n\t}\n}\n","import { Component, AfterViewInit } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-file-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n  <input [name]=\"name\" class=\"text-widget file-widget\" [attr.id]=\"id\"\n    [formControl]=\"control\" type=\"file\" [attr.disabled]=\"schema.readOnly?true:null\"\n    (change)=\"onFileChange($event)\">\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>`\n})\nexport class FileWidget extends ControlWidget implements AfterViewInit {\n\n  protected reader = new FileReader();\n  protected filedata: any = {};\n\n  constructor() {\n    super();\n  }\n\n  ngAfterViewInit() {\n    // OVERRIDE ControlWidget ngAfterViewInit() as ReactiveForms do not handle\n    // file inputs\n    const control = this.control;\n    this.formProperty.errorsChanges.subscribe((errors) => {\n      control.setErrors(errors, { emitEvent: true });\n    });\n\n    this.reader.onloadend = () => {\n      this.filedata.data = window.btoa((this.reader.result as string));\n      this.formProperty.setValue(this.filedata, false);\n    };\n  }\n\n  onFileChange($event) {\n    const file = $event.target.files[0];\n    this.filedata.filename = file.name;\n    this.filedata.size = file.size;\n    this.filedata['content-type'] = file.type;\n    this.filedata.encoding = 'base64';\n    this.reader.readAsBinaryString(file);\n  }\n}\n","import {\n  Component,\n} from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-integer-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n  <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<input [attr.readonly]=\"schema.readOnly?true:null\" [attr.name]=\"name\"\n\t[attr.id]=\"id\"\n\tclass=\"text-widget integer-widget form-control\" [formControl]=\"control\"\n\t[attr.type]=\"'number'\" [attr.min]=\"schema.minimum\" [attr.max]=\"schema.maximum\"\n\t[attr.placeholder]=\"schema.placeholder\"\n\t[attr.maxLength]=\"schema.maxLength || null\"\n  [attr.minLength]=\"schema.minLength || null\">\n</div>`\n})\nexport class IntegerWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-textarea-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<textarea [readonly]=\"schema.readOnly\" [name]=\"name\"\n\t\t[attr.id]=\"id\"\n\t\tclass=\"text-widget textarea-widget form-control\"\n\t\t[attr.placeholder]=\"schema.placeholder\"\n\t\t[attr.maxLength]=\"schema.maxLength || null\"\n    [attr.minLength]=\"schema.minLength || null\"\n\t\t[formControl]=\"control\"></textarea>\n</div>`\n})\nexport class TextAreaWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-radio-widget',\n  template: `<div class=\"widget form-group\">\n\t<label>{{schema.title}}</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<div *ngFor=\"let option of schema.oneOf\" class=\"radio\">\n\t\t<label class=\"horizontal control-label\">\n\t\t\t<input [formControl]=\"control\" [attr.name]=\"name\" [attr.id]=\"id + '.' + option.enum[0]\" value=\"{{option.enum[0]}}\" type=\"radio\"  [disabled]=\"schema.readOnly||option.readOnly\">\n\t\t\t{{option.description}}\n\t\t</label>\n\t</div>\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>`\n})\nexport class RadioWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-range-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\t\n\t<input [name]=\"name\" class=\"text-widget range-widget\" [attr.id]=\"id\"\n\t[formControl]=\"control\" [attr.type]=\"'range'\" [attr.min]=\"schema.minimum\" [attr.max]=\"schema.maximum\" [disabled]=\"schema.readOnly?true:null\" >\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\">\n</div>`\n})\nexport class RangeWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n\tselector: 'sf-select-widget',\n\ttemplate: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n\n\t<span *ngIf=\"schema.description\" class=\"formHelp\">\n\t\t{{schema.description}}\n\t</span>\n\n\t<select *ngIf=\"schema.type!='array'\" [formControl]=\"control\" [attr.name]=\"name\" [attr.id]=\"id\" [disabled]=\"schema.readOnly\" [disableControl]=\"schema.readOnly\" class=\"form-control\">\n\t\t<ng-container *ngIf=\"schema.oneOf; else use_enum\">\n\t\t\t<option *ngFor=\"let option of schema.oneOf\" [ngValue]=\"option.enum[0]\" >{{option.description}}</option>\n\t\t</ng-container>\n\t\t<ng-template #use_enum>\n\t\t\t<option *ngFor=\"let option of schema.enum\" [ngValue]=\"option\" >{{option}}</option>\n\t\t</ng-template>\n\t</select>\n\n\t<select *ngIf=\"schema.type==='array'\" multiple [formControl]=\"control\" [attr.name]=\"name\" [attr.id]=\"id\" [disabled]=\"schema.readOnly\" [disableControl]=\"schema.readOnly\" class=\"form-control\">\n    <option *ngFor=\"let option of schema.items.oneOf\" [ngValue]=\"option.enum[0]\" [disabled]=\"option.readOnly\">{{option.description}}</option>\n\t</select>\n\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>`\n})\nexport class SelectWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-string-widget',\n  template: `<input *ngIf=\"this.schema.widget.id ==='hidden'; else notHiddenFieldBlock\"\n  [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n<ng-template #notHiddenFieldBlock>\n<div class=\"widget form-group\">\n    <label [attr.for]=\"id\" class=\"horizontal control-label\">\n    \t{{ schema.title }}\n    </label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n    <input [name]=\"name\" [attr.readonly]=\"(schema.widget.id!=='color') && schema.readOnly?true:null\"\n    class=\"text-widget.id textline-widget form-control\"\n    [attr.type]=\"!this.schema.widget.id || this.schema.widget.id === 'string' ? 'text' : this.schema.widget.id\"\n    [attr.id]=\"id\"  [formControl]=\"control\" [attr.placeholder]=\"schema.placeholder\"\n    [attr.maxLength]=\"schema.maxLength || null\"\n    [attr.minLength]=\"schema.minLength || null\"\n    [attr.required]=\"schema.isRequired || null\"\n    [attr.disabled]=\"(schema.widget.id=='color' && schema.readOnly)?true:null\">\n    <input *ngIf=\"(schema.widget.id==='color' && schema.readOnly)\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>\n</ng-template>`\n})\nexport class StringWidget extends ControlWidget {\n\n    getInputType() {\n        if (!this.schema.widget.id || this.schema.widget.id === 'string') {\n            return 'text';\n        } else {\n            return this.schema.widget.id;\n        }\n    }\n}\n","import { ArrayWidget } from './array/array.widget';\nimport { ButtonWidget } from './button/button.widget';\nimport { CheckboxWidget } from './checkbox/checkbox.widget';\nimport { FileWidget } from './file/file.widget';\nimport { IntegerWidget } from './integer/integer.widget';\nimport { ObjectWidget } from './object/object.widget';\nimport { RadioWidget } from './radio/radio.widget';\nimport { RangeWidget } from './range/range.widget';\nimport { SelectWidget } from './select/select.widget';\nimport { StringWidget } from './string/string.widget';\nimport { TextAreaWidget } from './textarea/textarea.widget';\n\nimport { WidgetRegistry } from '../widgetregistry';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class DefaultWidgetRegistry extends WidgetRegistry {\n  constructor() {\n    super();\n\n    this.register('array',  ArrayWidget);\n    this.register('object',  ObjectWidget);\n\n    this.register('string', StringWidget);\n    this.register('search', StringWidget);\n    this.register('tel', StringWidget);\n    this.register('url', StringWidget);\n    this.register('email', StringWidget);\n    this.register('password', StringWidget);\n    this.register('color', StringWidget);\n    this.register('date', StringWidget);\n    this.register('date-time', StringWidget);\n    this.register('time', StringWidget);\n\n    this.register('integer', IntegerWidget);\n    this.register('number', IntegerWidget);\n    this.register('range', RangeWidget);\n\n    this.register('textarea', TextAreaWidget);\n\n    this.register('file', FileWidget);\n    this.register('select', SelectWidget);\n    this.register('radio', RadioWidget);\n    this.register('boolean', CheckboxWidget);\n    this.register('checkbox', CheckboxWidget);\n\n    this.register('button', ButtonWidget);\n\n    this.setDefaultWidget(StringWidget);\n  }\n}\n","import { Input, Directive } from '@angular/core'\nimport { NgControl } from '@angular/forms';\n\n@Directive({\n    selector: '[disableControl]'\n})\nexport class DisableControlDirective {\n\n    @Input() set disableControl(condition: boolean) {\n        const action = condition ? 'disable' : 'enable';\n        this.ngControl.control[action]();\n    }\n\n    constructor(private ngControl: NgControl) {\n    }\n\n}","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'sf-default-field',\n  template: `<p>Unknow type</p>`\n})\nexport class DefaultWidget {}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {\n  FormsModule,\n  ReactiveFormsModule\n} from '@angular/forms';\n\nimport {FormElementComponent} from './formelement.component';\nimport {FormComponent} from './form.component';\nimport {WidgetChooserComponent} from './widgetchooser.component';\nimport {ArrayWidget} from './defaultwidgets/array/array.widget';\nimport {ButtonWidget} from './defaultwidgets/button/button.widget';\nimport {ObjectWidget} from './defaultwidgets/object/object.widget';\nimport {CheckboxWidget} from './defaultwidgets/checkbox/checkbox.widget';\nimport {FileWidget} from './defaultwidgets/file/file.widget';\nimport {IntegerWidget} from './defaultwidgets/integer/integer.widget';\nimport {TextAreaWidget} from './defaultwidgets/textarea/textarea.widget';\nimport {RadioWidget} from './defaultwidgets/radio/radio.widget';\nimport {RangeWidget} from './defaultwidgets/range/range.widget';\nimport {SelectWidget} from './defaultwidgets/select/select.widget';\nimport {StringWidget} from './defaultwidgets/string/string.widget';\nimport {DefaultWidgetRegistry} from './defaultwidgets/defaultwidgetregistry';\nimport {DisableControlDirective} from './defaultwidgets/_directives/disableControl.directive';\n\nimport {\n  DefaultWidget\n} from './default.widget';\n\nimport {WidgetRegistry} from './widgetregistry';\nimport {SchemaValidatorFactory, ZSchemaValidatorFactory} from './schemavalidatorfactory';\nimport {FormElementComponentAction} from './formelement.action.component';\nimport {ExpressionCompilerFactory, JEXLExpressionCompilerFactory} from './expression-compiler-factory';\n\nconst moduleProviders = [\n  {\n    provide: WidgetRegistry,\n    useClass: DefaultWidgetRegistry\n  },\n  {\n    provide: SchemaValidatorFactory,\n    useClass: ZSchemaValidatorFactory\n  },\n  {\n    provide: ExpressionCompilerFactory,\n    useClass: JEXLExpressionCompilerFactory\n  }\n];\n\n@NgModule({\n  imports: [CommonModule, FormsModule, ReactiveFormsModule],\n  declarations: [\n    FormElementComponent,\n    FormElementComponentAction,\n    FormComponent,\n    WidgetChooserComponent,\n    DefaultWidget,\n    ArrayWidget,\n    ButtonWidget,\n    ObjectWidget,\n    CheckboxWidget,\n    FileWidget,\n    IntegerWidget,\n    TextAreaWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    StringWidget,\n    DisableControlDirective\n  ],\n  entryComponents: [\n    FormElementComponent,\n    FormElementComponentAction,\n    FormComponent,\n    WidgetChooserComponent,\n    ArrayWidget,\n    ButtonWidget,\n    ObjectWidget,\n    CheckboxWidget,\n    FileWidget,\n    IntegerWidget,\n    TextAreaWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    StringWidget\n  ],\n  exports: [\n    FormComponent,\n    FormElementComponent,\n    FormElementComponentAction,\n    WidgetChooserComponent,\n    ArrayWidget,\n    ButtonWidget,\n    ObjectWidget,\n    CheckboxWidget,\n    FileWidget,\n    IntegerWidget,\n    TextAreaWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    StringWidget,\n    DisableControlDirective\n  ]\n})\nexport class SchemaFormModule {\n\n  static forRoot(): ModuleWithProviders<SchemaFormModule> {\n    return {\n      ngModule: SchemaFormModule,\n      providers: [...moduleProviders]\n    };\n  }\n\n}\n","import { Injectable, EventEmitter } from '@angular/core';\n\n@Injectable()\nexport class TemplateSchemaService {\n\n  changes = new EventEmitter();\n\n  constructor() { }\n\n  changed() {\n    this.changes.emit();\n  }\n\n}\n","import { ElementRef } from '@angular/core';\n\nexport class TemplateSchemaElement {\n\n  getTextContent(elementRef: ElementRef): string {\n    const nodes = Array.from(elementRef.nativeElement.childNodes);\n    const node = <HTMLElement>nodes.filter((el: HTMLElement) => {\n      return el.nodeType === el.TEXT_NODE;\n    }).pop();\n\n    if (!node || !node.nodeValue) {\n      return '';\n    }\n\n    return node.nodeValue.trim();\n  }\n\n}\n","import {\n  Component,\n  AfterContentInit,\n  Input,\n  Output,\n  ElementRef,\n  EventEmitter,\n  forwardRef\n} from '@angular/core';\n\nimport { TemplateSchemaElement } from '../template-schema-element';\n\n\n@Component({\n  selector: 'sf-button',\n  templateUrl: './button.component.html',\n  providers: [\n    {\n      provide: TemplateSchemaElement,\n      useExisting: forwardRef(() => ButtonComponent),\n    }\n  ]\n})\nexport class ButtonComponent extends TemplateSchemaElement implements AfterContentInit {\n\n  @Input()\n  id: string;\n\n  @Input()\n  label = '';\n\n  @Input()\n  widget: string | object;\n\n  @Output()\n  click = new EventEmitter<any>();\n\n  constructor(private elementRef: ElementRef) {\n    super();\n  }\n\n  private setLabelFromContent() {\n    const textContent = this.getTextContent(this.elementRef);\n\n    // label as @Input takes priority over content text\n    if (textContent && !this.label) {\n      this.label = textContent;\n    }\n\n  }\n\n  ngAfterContentInit() {\n    this.setLabelFromContent();\n  }\n\n}\n","import { QueryList } from '@angular/core';\n\nimport { Validator } from '../../model/validator';\nimport { ActionRegistry } from '../../model/actionregistry';\nimport { ButtonComponent } from '../button/button.component';\nimport { TemplateSchemaElement } from '../template-schema-element';\n\nimport { Field, FieldType } from './field';\n\nexport abstract class FieldParent extends TemplateSchemaElement {\n\n  name = '';\n  type: FieldType;\n\n  get path(): string {\n    if (!this.name) {\n      return '';\n    }\n\n    return '/' + this.name;\n  }\n\n  protected abstract actionRegistry: ActionRegistry;\n  protected abstract childButtons: QueryList<ButtonComponent>;\n\n\n  getButtons(): { id: string, label: string, widget?: string | object }[] {\n\n    return this.childButtons.map((button, index) => {\n\n      if (!button.id) {\n        const randomString = Math.random().toString(16).substr(2, 8);\n        // generate id for button\n        button.id = this.name + randomString + '_'  + (index + 1);\n      }\n\n      // register as button action the EventEmitter click\n      this.actionRegistry.register(\n        button.id,\n        button.click.emit.bind(button.click)\n      );\n\n      const _button = <any>{\n        id: button.id,\n        label: button.label,\n      };\n\n      if (button.widget) {\n        _button.widget = button.widget;\n      }\n\n      return _button;\n\n    });\n  }\n\n  protected getFieldsValidators(\n    fields: Field[]\n  ): { path: string, validator: Validator }[] {\n\n    return fields.reduce((validators, field) => {\n      return validators.concat(field.getValidators());\n    }, []);\n\n  }\n\n  protected getFieldsSchema(fields: Field[]) {\n    return fields.reduce((schema: any, field) => {\n\n      switch (this.type) {\n        case FieldType.Array:\n          schema.items = field.getSchema();\n          break;\n\n        default:\n          if (!schema.properties) {\n            schema.properties = {};\n          }\n\n          schema.properties[field.name] = field.getSchema();\n          break;\n      }\n\n      const buttons = field.getButtons();\n      if (buttons.length > 0) {\n        schema.buttons = buttons;\n      }\n\n      if (!field.required) {\n        return schema;\n      }\n\n      if (!schema.required) {\n        schema.required = [];\n      }\n      schema.required.push(field.name);\n      return schema;\n    }, {});\n  }\n\n}\n","import {\n Component,\n ElementRef,\n Input,\n OnInit,\n} from '@angular/core';\n\nimport { TemplateSchemaElement } from '../../template-schema-element';\n\n\n@Component({\n  selector: 'sf-item',\n  templateUrl: './item.component.html'\n})\nexport class ItemComponent extends TemplateSchemaElement implements OnInit {\n\n  @Input()\n  value: any;\n\n  description: string;\n\n  constructor(private elementRef: ElementRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this.description = this.getTextContent(this.elementRef);\n  }\n\n}\n","import {\n  Component,\n  Input,\n  AfterContentInit,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\n\nimport { ActionRegistry } from '../../model/actionregistry';\nimport { Validator } from '../../model/validator';\n\nimport { TemplateSchemaService } from '../template-schema.service';\nimport { ButtonComponent } from '../button/button.component';\n\nimport { FieldParent } from './field-parent';\nimport { FieldType, Field } from './field';\nimport { ItemComponent } from './item/item.component';\nimport { merge } from 'rxjs';\n\n\n@Component({\n  selector: 'sf-field',\n  templateUrl: './field.component.html'\n})\nexport class FieldComponent extends FieldParent implements\nField, OnChanges, AfterContentInit {\n\n  @ContentChildren(FieldComponent)\n  childFields: QueryList<FieldComponent>;\n\n  @ContentChildren(ItemComponent)\n  childItems: QueryList<ItemComponent>;\n\n  @ContentChildren(ButtonComponent)\n  childButtons: QueryList<ButtonComponent>;\n\n  @Input()\n  name: string;\n\n  @Input()\n  type = FieldType.String;\n\n  @Input()\n  format: string;\n\n  @Input()\n  required: boolean;\n\n  @Input()\n  readOnly: boolean;\n\n  @Input()\n  title: string;\n\n  @Input()\n  description: string;\n\n  @Input()\n  placeholder: string;\n\n  @Input()\n  widget: string | object;\n\n  @Input()\n  validator: Validator;\n\n  @Input()\n  schema: any = { };\n\n  constructor(\n    private elementRef: ElementRef,\n    private templateSchemaService: TemplateSchemaService,\n    protected actionRegistry: ActionRegistry\n  ) {\n    super();\n  }\n\n  getSchema(): any {\n\n    const { properties, items, required } = this.getFieldsSchema(\n      this.childFields.filter(field => field !== this)\n    );\n\n    const oneOf = this.getOneOf();\n\n    const schema = <any>{\n      type: this.type\n    };\n\n    if (this.title !== undefined) {\n      schema.title = this.title;\n    }\n\n    if (properties !== undefined) {\n      schema.properties = properties;\n    }\n\n    if (items !== undefined) {\n      schema.items = items;\n    }\n\n    // requried child fields\n    if (required !== undefined) {\n      schema.required = required;\n    }\n\n    if (oneOf !== undefined) {\n      schema.oneOf = oneOf;\n    }\n\n    if (this.description !== undefined) {\n      schema.description = this.description;\n    }\n\n    if (this.placeholder !== undefined) {\n      schema.placeholder = this.placeholder;\n    }\n\n    if (this.format !== undefined) {\n      schema.format = this.format;\n    }\n\n    if (this.widget !== undefined) {\n      schema.widget = this.widget;\n    }\n\n    if (this.readOnly !== undefined) {\n      schema.readOnly = this.readOnly;\n    }\n\n    const buttons = this.getButtons();\n    if (buttons.length > 0) {\n      schema.buttons = buttons;\n    }\n\n    // @Input schema takes precedence\n    return Object.assign(schema, this.schema);\n\n  }\n\n  getValidators(): { path: string, validator: Validator }[] {\n\n    // registering validator here is not possible since prop full path is needed\n    const childValidators = this.getFieldsValidators(\n      this.childFields.filter(field => field !== this)\n    );\n    const validators = childValidators.map(({ path, validator }) => {\n      return {\n        path: this.path + path,\n        validator\n      };\n    });\n\n    if (!this.validator) {\n      return validators;\n    }\n\n    validators.push({ path: this.path, validator: this.validator });\n    return validators;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n\n    const keys = Object.keys(changes);\n    if (keys.length > 0) {\n      for (const key of keys) {\n        if (!changes[key].isFirstChange()) {\n          // on any input change, force schema change generation\n          this.templateSchemaService.changed();\n          break;\n        }\n      }\n    }\n\n  }\n\n\n  private getOneOf() {\n\n    if (this.childItems.length === 0) {\n      return;\n    }\n\n    const items = this.childItems.map(({ value, description }) => {\n      if (!Array.isArray(value)) {\n        return { enum: [value], description };\n      }\n\n      return { enum: value, description };\n    });\n\n    if (items.length === 0) {\n      return;\n    }\n\n    return items;\n  }\n\n\n  private setTitleFromContent() {\n    const textContent = this.getTextContent(this.elementRef);\n\n    //  title as @Input takes priority over content text\n    if (textContent && !this.title) {\n      this.title = textContent;\n    }\n  }\n\n  ngAfterContentInit() {\n\n    // cache it\n    this.setTitleFromContent();\n\n    merge(\n      this.childFields.changes,\n      this.childItems.changes,\n      this.childButtons.changes\n    )\n    .subscribe(() => this.templateSchemaService.changed());\n  }\n\n}\n","import {\n  Directive,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  SimpleChange,\n} from '@angular/core';\nimport { merge } from 'rxjs';\n\nimport { FormComponent } from '../form.component';\nimport { ActionRegistry } from '../model/actionregistry';\nimport { ValidatorRegistry } from '../model/validatorregistry';\nimport { TerminatorService } from '../terminator.service';\n\nimport { TemplateSchemaService } from './template-schema.service';\nimport { FieldComponent } from './field/field.component';\nimport { FieldType } from './field/field';\nimport { ButtonComponent } from './button/button.component';\nimport { FieldParent } from './field/field-parent';\n\n\n@Directive({\n  selector: 'sf-form[templateSchema]',\n  providers: [\n    TemplateSchemaService\n  ]\n})\nexport class TemplateSchemaDirective extends FieldParent implements AfterContentInit {\n\n  @ContentChildren(FieldComponent)\n  childFields: QueryList<FieldComponent>;\n\n  @ContentChildren(ButtonComponent)\n  childButtons: QueryList<ButtonComponent>;\n\n  constructor(\n    protected actionRegistry: ActionRegistry,\n    protected validatorRegistry: ValidatorRegistry,\n    private formComponent: FormComponent,\n    private terminatorService: TerminatorService,\n    private templateSchemaService: TemplateSchemaService\n  ) {\n    super();\n  }\n\n  setFormDocumentSchema(fields: FieldComponent[]) {\n      this.actionRegistry.clear();\n      this.validatorRegistry.clear();\n\n      const schema = this.getFieldsSchema(fields);\n\n      const validators = this.getFieldsValidators(fields);\n      validators.forEach(({ path, validator }) => {\n        this.validatorRegistry.register(path, validator);\n      });\n\n      const previousSchema = this.formComponent.schema;\n      this.formComponent.schema = {\n        type: FieldType.Object,\n        properties: schema.properties\n      };\n\n      if (schema.required && schema.required.length > 0) {\n        this.formComponent.schema.requred = schema.required;\n      }\n\n      const buttons = this.getButtons();\n      if (buttons.length > 0) {\n        this.formComponent.schema.buttons = buttons;\n      }\n\n      this.formComponent.ngOnChanges({\n        schema: new SimpleChange(\n          previousSchema,\n          this.formComponent.schema,\n          Boolean(previousSchema)\n        )\n      });\n\n  }\n\n\n  ngAfterContentInit() {\n\n    if (this.childFields.length > 0) {\n      this.setFormDocumentSchema(this.childFields.toArray());\n    }\n\n    merge(\n      this.childFields.changes,\n      this.templateSchemaService.changes\n    )\n   .subscribe(() => {\n      this.terminatorService.destroy();\n      this.setFormDocumentSchema(this.childFields.toArray());\n    });\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FieldComponent } from './field/field.component';\nimport { TemplateSchemaDirective } from './template-schema.directive';\nimport { ButtonComponent } from './button/button.component';\nimport { ItemComponent } from './field/item/item.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    TemplateSchemaDirective,\n    FieldComponent,\n    ButtonComponent,\n    ItemComponent\n  ],\n  exports: [\n    TemplateSchemaDirective,\n    FieldComponent,\n    ButtonComponent,\n    ItemComponent\n  ]\n})\nexport class TemplateSchemaModule { }\n"]}