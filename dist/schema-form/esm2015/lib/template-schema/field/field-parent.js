import { TemplateSchemaElement } from '../template-schema-element';
import { FieldType } from './field';
export class FieldParent extends TemplateSchemaElement {
    constructor() {
        super(...arguments);
        this.name = '';
    }
    get path() {
        if (!this.name) {
            return '';
        }
        return '/' + this.name;
    }
    getButtons() {
        return this.childButtons.map((button, index) => {
            if (!button.id) {
                const randomString = Math.random().toString(16).substr(2, 8);
                // generate id for button
                button.id = this.name + randomString + '_' + (index + 1);
            }
            // register as button action the EventEmitter click
            this.actionRegistry.register(button.id, button.click.emit.bind(button.click));
            const _button = {
                id: button.id,
                label: button.label,
            };
            if (button.widget) {
                _button.widget = button.widget;
            }
            return _button;
        });
    }
    getFieldsValidators(fields) {
        return fields.reduce((validators, field) => {
            return validators.concat(field.getValidators());
        }, []);
    }
    getFieldsSchema(fields) {
        return fields.reduce((schema, field) => {
            switch (this.type) {
                case FieldType.Array:
                    schema.items = field.getSchema();
                    break;
                default:
                    if (!schema.properties) {
                        schema.properties = {};
                    }
                    schema.properties[field.name] = field.getSchema();
                    break;
            }
            const buttons = field.getButtons();
            if (buttons.length > 0) {
                schema.buttons = buttons;
            }
            if (!field.required) {
                return schema;
            }
            if (!schema.required) {
                schema.required = [];
            }
            schema.required.push(field.name);
            return schema;
        }, {});
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQtcGFyZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXNjaGVtYS1mb3JtLyIsInNvdXJjZXMiOlsibGliL3RlbXBsYXRlLXNjaGVtYS9maWVsZC9maWVsZC1wYXJlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFbkUsT0FBTyxFQUFTLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUUzQyxNQUFNLE9BQWdCLFdBQVksU0FBUSxxQkFBcUI7SUFBL0Q7O1FBRUUsU0FBSSxHQUFHLEVBQUUsQ0FBQztJQXlGWixDQUFDO0lBdEZDLElBQUksSUFBSTtRQUNOLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2QsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUVELE9BQU8sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDekIsQ0FBQztJQU1ELFVBQVU7UUFFUixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBRTdDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFO2dCQUNkLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDN0QseUJBQXlCO2dCQUN6QixNQUFNLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsWUFBWSxHQUFHLEdBQUcsR0FBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQzthQUMzRDtZQUVELG1EQUFtRDtZQUNuRCxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FDMUIsTUFBTSxDQUFDLEVBQUUsRUFDVCxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUNyQyxDQUFDO1lBRUYsTUFBTSxPQUFPLEdBQVE7Z0JBQ25CLEVBQUUsRUFBRSxNQUFNLENBQUMsRUFBRTtnQkFDYixLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUs7YUFDcEIsQ0FBQztZQUVGLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRTtnQkFDakIsT0FBTyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO2FBQ2hDO1lBRUQsT0FBTyxPQUFPLENBQUM7UUFFakIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRVMsbUJBQW1CLENBQzNCLE1BQWU7UUFHZixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxVQUFVLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDekMsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO1FBQ2xELENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUVULENBQUM7SUFFUyxlQUFlLENBQUMsTUFBZTtRQUN2QyxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFXLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFFMUMsUUFBUSxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNqQixLQUFLLFNBQVMsQ0FBQyxLQUFLO29CQUNsQixNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQztvQkFDakMsTUFBTTtnQkFFUjtvQkFDRSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRTt3QkFDdEIsTUFBTSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7cUJBQ3hCO29CQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQztvQkFDbEQsTUFBTTthQUNUO1lBRUQsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ25DLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ3RCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO2FBQzFCO1lBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUU7Z0JBQ25CLE9BQU8sTUFBTSxDQUFDO2FBQ2Y7WUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRTtnQkFDcEIsTUFBTSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7YUFDdEI7WUFDRCxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDakMsT0FBTyxNQUFNLENBQUM7UUFDaEIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ1QsQ0FBQztDQUVGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFZhbGlkYXRvciB9IGZyb20gJy4uLy4uL21vZGVsL3ZhbGlkYXRvcic7XG5pbXBvcnQgeyBBY3Rpb25SZWdpc3RyeSB9IGZyb20gJy4uLy4uL21vZGVsL2FjdGlvbnJlZ2lzdHJ5JztcbmltcG9ydCB7IEJ1dHRvbkNvbXBvbmVudCB9IGZyb20gJy4uL2J1dHRvbi9idXR0b24uY29tcG9uZW50JztcbmltcG9ydCB7IFRlbXBsYXRlU2NoZW1hRWxlbWVudCB9IGZyb20gJy4uL3RlbXBsYXRlLXNjaGVtYS1lbGVtZW50JztcblxuaW1wb3J0IHsgRmllbGQsIEZpZWxkVHlwZSB9IGZyb20gJy4vZmllbGQnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRmllbGRQYXJlbnQgZXh0ZW5kcyBUZW1wbGF0ZVNjaGVtYUVsZW1lbnQge1xuXG4gIG5hbWUgPSAnJztcbiAgdHlwZTogRmllbGRUeXBlO1xuXG4gIGdldCBwYXRoKCk6IHN0cmluZyB7XG4gICAgaWYgKCF0aGlzLm5hbWUpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gJy8nICsgdGhpcy5uYW1lO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGFjdGlvblJlZ2lzdHJ5OiBBY3Rpb25SZWdpc3RyeTtcbiAgcHJvdGVjdGVkIGFic3RyYWN0IGNoaWxkQnV0dG9uczogUXVlcnlMaXN0PEJ1dHRvbkNvbXBvbmVudD47XG5cblxuICBnZXRCdXR0b25zKCk6IHsgaWQ6IHN0cmluZywgbGFiZWw6IHN0cmluZywgd2lkZ2V0Pzogc3RyaW5nIHwgb2JqZWN0IH1bXSB7XG5cbiAgICByZXR1cm4gdGhpcy5jaGlsZEJ1dHRvbnMubWFwKChidXR0b24sIGluZGV4KSA9PiB7XG5cbiAgICAgIGlmICghYnV0dG9uLmlkKSB7XG4gICAgICAgIGNvbnN0IHJhbmRvbVN0cmluZyA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMTYpLnN1YnN0cigyLCA4KTtcbiAgICAgICAgLy8gZ2VuZXJhdGUgaWQgZm9yIGJ1dHRvblxuICAgICAgICBidXR0b24uaWQgPSB0aGlzLm5hbWUgKyByYW5kb21TdHJpbmcgKyAnXycgICsgKGluZGV4ICsgMSk7XG4gICAgICB9XG5cbiAgICAgIC8vIHJlZ2lzdGVyIGFzIGJ1dHRvbiBhY3Rpb24gdGhlIEV2ZW50RW1pdHRlciBjbGlja1xuICAgICAgdGhpcy5hY3Rpb25SZWdpc3RyeS5yZWdpc3RlcihcbiAgICAgICAgYnV0dG9uLmlkLFxuICAgICAgICBidXR0b24uY2xpY2suZW1pdC5iaW5kKGJ1dHRvbi5jbGljaylcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IF9idXR0b24gPSA8YW55PntcbiAgICAgICAgaWQ6IGJ1dHRvbi5pZCxcbiAgICAgICAgbGFiZWw6IGJ1dHRvbi5sYWJlbCxcbiAgICAgIH07XG5cbiAgICAgIGlmIChidXR0b24ud2lkZ2V0KSB7XG4gICAgICAgIF9idXR0b24ud2lkZ2V0ID0gYnV0dG9uLndpZGdldDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9idXR0b247XG5cbiAgICB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRGaWVsZHNWYWxpZGF0b3JzKFxuICAgIGZpZWxkczogRmllbGRbXVxuICApOiB7IHBhdGg6IHN0cmluZywgdmFsaWRhdG9yOiBWYWxpZGF0b3IgfVtdIHtcblxuICAgIHJldHVybiBmaWVsZHMucmVkdWNlKCh2YWxpZGF0b3JzLCBmaWVsZCkgPT4ge1xuICAgICAgcmV0dXJuIHZhbGlkYXRvcnMuY29uY2F0KGZpZWxkLmdldFZhbGlkYXRvcnMoKSk7XG4gICAgfSwgW10pO1xuXG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0RmllbGRzU2NoZW1hKGZpZWxkczogRmllbGRbXSkge1xuICAgIHJldHVybiBmaWVsZHMucmVkdWNlKChzY2hlbWE6IGFueSwgZmllbGQpID0+IHtcblxuICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgY2FzZSBGaWVsZFR5cGUuQXJyYXk6XG4gICAgICAgICAgc2NoZW1hLml0ZW1zID0gZmllbGQuZ2V0U2NoZW1hKCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAoIXNjaGVtYS5wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBzY2hlbWEucHJvcGVydGllcyA9IHt9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNjaGVtYS5wcm9wZXJ0aWVzW2ZpZWxkLm5hbWVdID0gZmllbGQuZ2V0U2NoZW1hKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGJ1dHRvbnMgPSBmaWVsZC5nZXRCdXR0b25zKCk7XG4gICAgICBpZiAoYnV0dG9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHNjaGVtYS5idXR0b25zID0gYnV0dG9ucztcbiAgICAgIH1cblxuICAgICAgaWYgKCFmaWVsZC5yZXF1aXJlZCkge1xuICAgICAgICByZXR1cm4gc2NoZW1hO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXNjaGVtYS5yZXF1aXJlZCkge1xuICAgICAgICBzY2hlbWEucmVxdWlyZWQgPSBbXTtcbiAgICAgIH1cbiAgICAgIHNjaGVtYS5yZXF1aXJlZC5wdXNoKGZpZWxkLm5hbWUpO1xuICAgICAgcmV0dXJuIHNjaGVtYTtcbiAgICB9LCB7fSk7XG4gIH1cblxufVxuIl19